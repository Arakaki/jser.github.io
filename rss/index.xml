<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JSer.info</title>
    <description>JavaScriptの最新情報を紹介する週刊ブログ</description>
    <link>https://jser.info/</link>
    <atom:link href="https://jser.info/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 04 Feb 2017 19:28:37 +0900</pubDate>
    <lastBuildDate>Sat, 04 Feb 2017 19:28:37 +0900</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>JSerレポート #1 Bundlerの未来、テスティングフレームワークの現状</title>
        <description>&lt;p&gt;JSer.infoでは不定期でレポートという形で、特定のテーマに関する状況をまとめています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jser/report&quot; title=&quot;jser/report&quot;&gt;jser/report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;レポートなどの更新情報を知りたい方は&lt;a href=&quot;https://jser.info/rss/&quot;&gt;RSS&lt;/a&gt;や&lt;a href=&quot;https://twitter.com/jser_info&quot;&gt;Twitter@jser_info&lt;/a&gt;をフォローしてみてください。&lt;/p&gt;

&lt;h1 id=&quot;bundler-#1&quot;&gt;&lt;a href=&quot;https://github.com/jser/report/issues/1&quot; title=&quot;Next Bundler #1&quot;&gt;Bundler #1&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;JavaScriptのコードはモジュールに分けて開発することが一般的です。&lt;br&gt;
ブラウザにおいて、一つずつ&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;タグでモジュールをロードするのはラウンドトリップやコネクションの問題が発生します。&lt;/p&gt;

&lt;p&gt;そのため、多くの場合ブラウザ向けのコードはモジュールをまとめた(bundleした)ファイルを作成して配信します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://teppeis.hatenablog.com/entry/2015/05/es6-modules-and-http2&quot; title=&quot;ES6 ModulesはHTTP/2によってconcat無しで使えるようになるのか - teppeis blog&quot;&gt;ES6 ModulesはHTTP/2によってconcat無しで使えるようになるのか - teppeis blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/uctakeoff/items/ce8da368d020273c6064&quot; title=&quot;レトロエンジニアのための近代Webフロントエンド事情 - Qiita&quot;&gt;レトロエンジニアのための近代Webフロントエンド事情 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その際にモジュールの依存関係などを解決しながらファイルをまとめる&amp;quot;bundler&amp;quot;と呼ばれるツールの動きについてのレポートです。&lt;/p&gt;

&lt;h2 id=&quot;webpack-2&quot;&gt;webpack 2&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v2.2.0&quot; title=&quot;Release v2.2.0 · webpack/webpack&quot;&gt;Release v2.2.0 · webpack/webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;webpack 2が正式にリリースされています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.info/2017/01/24/webpack-2-javascript-2016-js-star/&quot; title=&quot;2017-01-24のJS: webpack 2正式リリース、JavaScriptの開発環境設定、2016 JS Stars - JSer.info&quot;&gt;2017-01-24のJS: webpack 2正式リリース、JavaScriptの開発環境設定、2016 JS Stars - JSer.info&lt;/a&gt;で紹介しました。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;webpack 2のドキュメントは &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack.js.org/&lt;/a&gt; の新しいサイトの方にまとめられています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/guides/migrating/&quot; title=&quot;Migrating from v1 to v2&quot;&gt;Migrating from v1 to v2&lt;/a&gt;にマイグレーションガイドがあります。&lt;/p&gt;

&lt;p&gt;一部設定の名前が変更されていたり、&lt;code&gt;json-loader&lt;/code&gt;がデフォルトとなっていたり既存のconfigを変更する参考になると思います。&lt;/p&gt;

&lt;p&gt;今後の機能追加や改善については、投票ツールを通じて決定していくようです。&lt;br&gt;
(投票の重み付けに利用されている&lt;a href=&quot;http://azu.github.io/slide/2017/t_wada_sushi/OpenCollective.html&quot; title=&quot;Open Collective&quot;&gt;Open Collectiveについてのスライド&lt;/a&gt;を書いたので、併せてみるといいかもしれません)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webpack.js.org/vote/&quot;&gt;https://webpack.js.org/vote/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;投票のサイトを見ると今のところ次の開発候補としてはScope Hoisting(Rollupインスパイアな最適化)、Typescript周りの改善などが上がっているようです。&lt;/p&gt;

&lt;h2 id=&quot;fusebox&quot;&gt;&lt;a href=&quot;http://fuse-box.org/&quot; title=&quot;Fusebox&quot;&gt;Fusebox&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://fuse-box.org/&quot; title=&quot;Fusebox&quot;&gt;Fusebox&lt;/a&gt;という新しいBundlerツールが登場しました。&lt;br&gt;
実際に試してみると、初回のビルドと再ビルド(&lt;code&gt;.fusebox&lt;/code&gt;のキャッシュあり)どちらも高速です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.info/2017/01/04/postcss-chrome-fusebox/&quot; title=&quot;2017-01-04のJS: PostCSS概要、Chrome開発者ツール、FuseBox - JSer.info&quot;&gt;2017-01-04のJS: PostCSS概要、Chrome開発者ツール、FuseBox - JSer.info&lt;/a&gt; で紹介しました。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本的に設定はJavaScriptのコードとして書くようになっていて、&lt;code&gt;node&lt;/code&gt;で実行するだけです。&lt;/p&gt;

&lt;p&gt;また、webpackのように設定としてentryポイントを設定するのではなく、ビルドの設定をする&lt;code&gt;FuseBox.init&lt;/code&gt;と実際にbudnleするものを決める&lt;code&gt;fuse.bundle&lt;/code&gt;メソッドで分かれています。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FuseBox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;fusebox&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FuseBox&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fuse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FuseBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;homeDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;src/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;globals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;myLib&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;outFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./out.js&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fuse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;gt;index.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そのためコードとして設定を書くgulpとは相性がいいため、公式のサンプルでもgulp内に書いている例を見かけます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fuse-box/angular2-example/blob/master/gulpfile.js&quot; title=&quot;angular2-example/gulpfile.js at master · fuse-box/angular2-example&quot;&gt;angular2-example/gulpfile.js at master · fuse-box/angular2-example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rollup&quot;&gt;&lt;a href=&quot;https://github.com/rollup/rollup&quot; title=&quot;Rollup&quot;&gt;Rollup&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;大きな変化はありませんが、Rollupは順調に開発中です。&lt;br&gt;
次のIssueも併せてみると面白いかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/sample-framework-boot/pull/10#issuecomment-272632548&quot; title=&quot;Use minified version of React by gaearon · Pull Request #10 · GoogleChrome/sample-framework-boot&quot;&gt;Use minified version of React by gaearon · Pull Request #10 · GoogleChrome/sample-framework-boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;browserify&quot;&gt;&lt;a href=&quot;https://github.com/substack/node-browserify&quot; title=&quot;browserify&quot;&gt;Browserify&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Browserify自体を機能追加/改善するアップデートはあまり積極的に行われていません。&lt;br&gt;
@substack以外にPRをマージするOwnerがいないことに起因しています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/substack/node-browserify/graphs/contributors&quot;&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/19714/22461846/515bb70a-e7ee-11e6-9651-648f65a2a8c8.png&quot; alt=&quot;node-browserify 2017-01-31 19-47-37&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;元々本体に多くの機能があるわけではなく依存するパッケージに機能が分散しています。&lt;br&gt;
しかし、その依存のアップデートが滞りがちです。&lt;br&gt;
Issue/PRにはNode.js v6&amp;gt;=で追加されたDeprecated Warningや依存するパッケージのDeprecated Warningを解消する些細なものが多く並んでいます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/substack/node-browserify/pulls&quot;&gt;https://github.com/substack/node-browserify/pulls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nodejs/node/issues/9531&quot; title=&quot;buffer: discuss future direction of Buffer constructor API · Issue #9531 · nodejs/node&quot;&gt;buffer: discuss future direction of Buffer constructor API · Issue #9531 · nodejs/node&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先日、&lt;a href=&quot;https://github.com/substack/node-browserify/blob/master/changelog.markdown#1400&quot; title=&quot;14.0.0&quot;&gt;14.0.0&lt;/a&gt;がリリースされました。&lt;br&gt;
このリリースでは、Browserifyが利用する&lt;code&gt;buffer&lt;/code&gt;のpolyfillである&lt;a href=&quot;https://github.com/feross/buffer&quot; title=&quot;feross/buffer&quot;&gt;feross/buffer&lt;/a&gt;がアップデートされています。&lt;br&gt;
&lt;code&gt;TypedArray&lt;/code&gt;を使う実装になったため、bufferを含んだコードを変換した場合に、IE10以下では動かなくなります。&lt;/p&gt;

&lt;p&gt;IE10以下でも動くようにしたい場合は、古い&lt;a href=&quot;https://github.com/feross/buffer&quot; title=&quot;feross/buffer&quot;&gt;feross/buffer&lt;/a&gt;を利用する必要があります。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install buffer@4 --save
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;browserify -r buffer/:buffer main.js &amp;gt; bundle.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;es-modules&quot;&gt;ES modules&lt;/h2&gt;

&lt;p&gt;MSEdgeと&lt;a href=&quot;https://lists.webkit.org/pipermail/webkit-dev/2016-December/028564.html&quot;&gt;WebKit&lt;/a&gt;にES modules(&lt;code&gt;&amp;lt;script type=&amp;quot;module&amp;quot;&amp;gt;&lt;/code&gt;)が実装されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webkit.org/blog/7265/release-notes-for-safari-technology-preview-21/&quot; title=&quot;Release Notes for Safari Technology Preview 21 | WebKit&quot;&gt;Release Notes for Safari Technology Preview 21 | WebKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ES modulesとNode.js modulesについては細かな挙動の違いなどが存在します。&lt;br&gt;
詳しくは次の記事を読むと良いです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.hospodarets.com/native-ecmascript-modules-new-features&quot;&gt;Native ECMAScript modules: the new features and differences from Webpack modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.hospodarets.com/native-ecmascript-modules-the-first-overview#browsers-support&quot;&gt;Native ECMAScript modules - the first overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;webpack 2やrollupなどはES modulesのコードを直接扱うようになっています。&lt;br&gt;
ES modulesのブラウザ実装が進むにつれ、ES modulesを扱うツールなども増えてくることが予想されます。&lt;br&gt;
Bundlerはそこへ直接関係するツールであるため、今後の動きに注目していく必要があります。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 id=&quot;testing-framework-#3&quot;&gt;&lt;a href=&quot;https://github.com/jser/report/issues/3&quot; title=&quot;Testing Framework #3&quot;&gt;Testing Framework #3&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;JavaScriptのテスティングフレームワーク周りのレポートです。&lt;/p&gt;

&lt;h2 id=&quot;mochaがcontributorを募集&quot;&gt;&lt;a href=&quot;https://github.com/mochajs/mocha&quot;&gt;Mocha&lt;/a&gt;がContributorを募集&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Mocha needs YOU!&lt;br&gt;
-- &lt;a href=&quot;https://github.com/mochajs/mocha#mocha-needs-you&quot;&gt;https://github.com/mochajs/mocha#mocha-needs-you&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mochaのメンテナンスリソースが足りていないため協力を募集する内容がREADMEにかかれています。&lt;br&gt;
IssueやPull Requestのレビューをしてくれる人やMochaへのテストの追加などをコントリビューションを募集しています。&lt;/p&gt;

&lt;p&gt;詳しくは&lt;a href=&quot;https://github.com/mochajs/mocha/projects&quot; title=&quot;Projects · mochajs/mocha&quot;&gt;Projects&lt;/a&gt;を見るかGitterでやり取りすると良さそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gitter.im/mochajs/mocha&quot; title=&quot;mochajs/mocha - Gitter&quot;&gt;mochajs/mocha - Gitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sinon.js-2.0へ向けて&quot;&gt;Sinon.js 2.0へ向けて&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://sinonjs.org/&quot; title=&quot;Sinon.JS&quot;&gt;Sinon.JS&lt;/a&gt; が2.0向けての作業が進められています。&lt;br&gt;
タスクについては次のIssueで管理されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sinonjs/sinon/issues/966&quot; title=&quot;Sinon 2.0 Release · Issue #966 · sinonjs/sinon&quot;&gt;Sinon 2.0 Release · Issue #966 · sinonjs/sinon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The much fabled 2.0 release, that will split Sinon.JS into more modules, tidy up the api, simplify all the dependency boilerplate by using Browserify. &lt;br&gt;
-- &lt;a href=&quot;https://github.com/sinonjs/sinon/milestone/5&quot; title=&quot;2.0 Milestone&quot;&gt;2.0 Milestone&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とあるように、(CommonJS)モジュールとして管理されていなかったのを大きくリファクタリングし、それぞれがモジュール化されています。&lt;br&gt;
残りのタスクにはドキュメント系となっているため、そこまで遠くない日に2.0がリリースされるかもしれません。&lt;br&gt;
プレリリース版は既に公開されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sinonjs/sinon/releases&quot; title=&quot;Releases · sinonjs/sinon&quot;&gt;Releases · sinonjs/sinon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2016-javascript-rising-stars&quot;&gt;&lt;a href=&quot;https://risingstars2016.js.org/&quot; title=&quot;2016 JavaScript Rising Stars&quot;&gt;2016 JavaScript Rising Stars&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;JavaScriptに関するツールやライブラリのStar増加率をまとめたサイトにおいて、&lt;a href=&quot;https://risingstars2016.js.org/#test-framework&quot; title=&quot;#8Testing Frameworks&quot;&gt;Testing Frameworks&lt;/a&gt;についてもまとめられています。&lt;br&gt;
2016年は&lt;a href=&quot;https://github.com/avajs/ava&quot; title=&quot;AVA&quot;&gt;AVA&lt;/a&gt;と&lt;a href=&quot;http://facebook.github.io/jest/&quot; title=&quot;Jest&quot;&gt;Jest&lt;/a&gt;のStar数が伸びているようです。&lt;/p&gt;

&lt;h2 id=&quot;ava-will-introduce-magic-assert&quot;&gt;AVA will introduce Magic assert&lt;/h2&gt;

&lt;p&gt;テストフレームワークの&lt;a href=&quot;https://github.com/avajs/ava&quot; title=&quot;AVA&quot;&gt;AVA&lt;/a&gt;は&lt;a href=&quot;https://github.com/power-assert-js/power-assert&quot; title=&quot;power-assert&quot;&gt;power-assert&lt;/a&gt;を内部的に利用しテスト結果を表示することができます。&lt;br&gt;
現在、そのテスト結果の表示をより分かりやすくしようと&lt;code&gt;magic-assert&lt;/code&gt;という名前で開発がされています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/avajs/ava/issues/1155&quot; title=&quot;Magic assert · Issue #1155 · avajs/ava&quot;&gt;Magic assert · Issue #1155 · avajs/ava&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/697676/21117268/9459421a-c0c1-11e6-80e6-bb2ce6be7c76.png&quot; alt=&quot;magic-assert&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;JSer.infoでは不定期でレポートという形で、特定のテーマに関する状況をまとめています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jser/report&quot; title=&quot;jser/report&quot;&gt;jser/report&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;レポートなどの更新情報を知りたい方は&lt;a href=&quot;https://jser.info/rss/&quot;&gt;RSS&lt;/a&gt;や&lt;a href=&quot;https://twitter.com/jser_info&quot;&gt;Twitter@jser_info&lt;/a&gt;をフォローしてみてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/jser_info&quot; class=&quot;twitter-follow-button&quot; data-show-count=&quot;false&quot; data-size=&quot;large&quot;&gt;Follow @jser_info&lt;/a&gt;&lt;br&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&amp;#39;http&amp;#39;:&amp;#39;https&amp;#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&amp;#39;://platform.twitter.com/widgets.js&amp;#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &amp;#39;script&amp;#39;, &amp;#39;twitter-wjs&amp;#39;);&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://cloud.feedly.com/#subscription%2Ffeed%2Fhttps://jser.info/rss/&#39; target=&#39;blank&#39;&gt;&lt;img id=&#39;feedlyFollow&#39; src=&#39;https://s3.feedly.com/img/follows/feedly-follow-rectangle-flat-medium_2x.png&#39; alt=&#39;follow us in feedly&#39; width=&#39;71&#39; height=&#39;28&#39;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Jan 2017 10:12:00 +0900</pubDate>
        <link>https://jser.info/2017/01/31/bundler-testing-framework-report/</link>
        <guid isPermaLink="true">https://jser.info/2017/01/31/bundler-testing-framework-report/</guid>
        
        <category>webpack</category>
        
        <category>bundler</category>
        
        <category>testing</category>
        
        <category>report</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>report</category>
        
      </item>
    
      <item>
        <title>2017-01-30のJS: Safari 10.1 pre、Firefox51.0、徐々に型を付けてのリファクタリング</title>
        <description>&lt;p&gt;JSer.info #316 - &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_1.html&quot; title=&quot;Safari 10.1&quot;&gt;Safari 10.1&lt;/a&gt;がプレリリースされました。&lt;/p&gt;

&lt;p&gt;Fetch API、IndexedDB 2.0、Custom Elements、Pointer Lock/Gamepad API、ES2016,2017のサポートなど。&lt;br&gt;
また&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;要素の&lt;code&gt;download&lt;/code&gt;属性、CSS Gridなどのサポートが含まれています。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/51.0/releasenotes/&quot; title=&quot;Firefox — Notes (51.0) — Mozilla&quot;&gt;Firefox 51.0&lt;/a&gt;がリリースされました。&lt;/p&gt;

&lt;p&gt;WebGL 2、IndexedDB 2、XHRの仕様追従、FLAC形式のサポートなどが行われています。&lt;br&gt;
また、&lt;code&gt;DOMImplementation.hasFeature()&lt;/code&gt;は常に&lt;code&gt;true&lt;/code&gt;を返すように、非標準な&lt;code&gt;for each in&lt;/code&gt;に警告が出るようになるなど。&lt;/p&gt;

&lt;p&gt;詳しくは次のサイトを見てください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/Firefox/Releases/51&quot; title=&quot;Firefox 51 for developers - Mozilla | MDN&quot;&gt;Firefox 51 for developers - Mozilla | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fxsitecompat.com/en-CA/versions/51/&quot; title=&quot;Firefox 51 Site Compatibility | Firefox Site Compatibility&quot;&gt;Firefox 51 Site Compatibility | Firefox Site Compatibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reaktor.com/blog/refactoring-30000-lines-js-types/&quot; title=&quot;Refactoring 30000 lines of JS with types - Reaktor.com&quot;&gt;Refactoring 30000 lines of JS with types - Reaktor.com&lt;/a&gt;という記事では3万行のJavaScriptをどのようにリファクタリングしていったかについて書かれています。&lt;/p&gt;

&lt;p&gt;アプローチとして型をつけていきながらリファクタリングをしていく際にFlowTypeやTypeScriptを使ったときの問題点やそれぞれのツールではどのような方法が用意されているかについて。&lt;br&gt;
Flowではweak modeを使った方法やTypeScriptでは&lt;code&gt;.js&lt;/code&gt;を&lt;code&gt;.ts&lt;/code&gt;に変更するところからなど、どのように徐々に型をつける戦略がとれるかといった話。&lt;br&gt;
最終的にTypeScriptを利用し、その際に遭遇したエラーなどについても書かれています。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;safari-10.1&quot;&gt;Safari 10.1&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_1.html&quot; title=&quot;Safari 10.1&quot;&gt;developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_1.html&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;safari&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
Safari 10.1 プレリリース。&lt;br&gt;
Fetch API、IndexedDB 2.0、Custom Elements、Pointer Lock/Gamepad API、ES2016,2017のサポートなど。&lt;br&gt;
また&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;要素の&lt;code&gt;download&lt;/code&gt;属性,&lt;br&gt;
CSS Gridなどのサポート&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;firefox-—-notes-(51.0)-—-mozilla&quot;&gt;Firefox — Notes (51.0) — Mozilla&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/51.0/releasenotes/&quot; title=&quot;Firefox — Notes (51.0) — Mozilla&quot;&gt;www.mozilla.org/en-US/firefox/51.0/releasenotes/&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;firefox&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
Firefox 51.0リリース。&lt;br&gt;
WebGL 2、IndexedDB 2、XHRの仕様追従、FLAC形式のサポート、&lt;code&gt;DOMImplementation.hasFeature()&lt;/code&gt;は常に&lt;code&gt;true&lt;/code&gt;を返すように、非標準なAPIを削除など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/Firefox/Releases/51&quot; title=&quot;Firefox 51 for developers - Mozilla | MDN&quot;&gt;Firefox 51 for developers - Mozilla | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fxsitecompat.com/en-CA/versions/51/&quot; title=&quot;Firefox 51 Site Compatibility | Firefox Site Compatibility&quot;&gt;Firefox 51 Site Compatibility | Firefox Site Compatibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;node-browserify/changelog.markdown-at-master-·-substack/node-browserify&quot;&gt;node-browserify/changelog.markdown at master · substack/node-browserify&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/substack/node-browserify/blob/master/changelog.markdown&quot; title=&quot;node-browserify/changelog.markdown at master · substack/node-browserify&quot;&gt;github.com/substack/node-browserify/blob/master/changelog.markdown&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;browserify&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
Browserify 14.0.0リリース。&lt;br&gt;
bufferのpolyfillがアップグレードされ、IE10以下のサポートが終了。&lt;br&gt;
bufferパッケージがTypedArrayを利用しているため。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/substack/node-browserify/pull/1678&quot; title=&quot;Update &amp;amp;amp;#39;buffer&amp;amp;amp;#39; to v5.x by feross · Pull Request #1678 · substack/node-browserify&quot;&gt;Update &amp;amp;#39;buffer&amp;amp;#39; to v5.x by feross · Pull Request #1678 · substack/node-browserify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-notes-for-safari-technology-preview-22-|-webkit&quot;&gt;Release Notes for Safari Technology Preview 22 | WebKit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://webkit.org/blog/7354/release-notes-for-safari-technology-preview-22/&quot; title=&quot;Release Notes for Safari Technology Preview 22 | WebKit&quot;&gt;webkit.org/blog/7354/release-notes-for-safari-technology-preview-22/&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;safari&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
Safari Technology Preview Release 22リリース。&lt;br&gt;
&lt;code&gt;scroll-snap-type:proximity&lt;/code&gt;のサポート、&lt;code&gt;innerText&lt;/code&gt;の仕様追従、&lt;code&gt;URLSearchParams&lt;/code&gt;がiterableとなるなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;video.js-6.0.0-rc.0:-the-first-release-candidate-|-video.js-blog&quot;&gt;Video.js 6.0.0-RC.0: The first Release Candidate | Video.js Blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.videojs.com/Video-js-6-0-0-RC-0-The-first-RC/&quot; title=&quot;Video.js 6.0.0-RC.0: The first Release Candidate | Video.js Blog&quot;&gt;blog.videojs.com/Video-js-6-0-0-RC-0-The-first-RC/&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;video&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
video.js v6.0 RCリリース。&lt;br&gt;
FlashをCoreから取り除き、Reactインスパイアなプラグインアーキテクチャの追加、accessiblityの改善など&lt;br&gt;
- &lt;a href=&quot;http://blog.videojs.com/the-end-of-html-first/&quot; title=&quot;The End of &amp;amp;amp;#34;HTML-First&amp;amp;amp;#34; | Video.js Blog&quot;&gt;The End of &amp;amp;#34;HTML-First&amp;amp;#34; | Video.js Blog&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;refactoring-30000-lines-of-js-with-types---reaktor.com&quot;&gt;Refactoring 30000 lines of JS with types - Reaktor.com&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.reaktor.com/blog/refactoring-30000-lines-js-types/&quot; title=&quot;Refactoring 30000 lines of JS with types - Reaktor.com&quot;&gt;www.reaktor.com/blog/refactoring-30000-lines-js-types/&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;リファクタリング&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
3万行のJavaScriptをリファクタリングしたアプローチについて。&lt;br&gt;
逐次的な型付のアプローチについて。&lt;br&gt;
Flowのweek modeとコメントでの型付けを使った方法と問題点。&lt;br&gt;
TypeScriptを使った名前空間オブジェクトへのアプローチとメリット/デメリット。&lt;br&gt;
最終的にTypeScriptを使ったがそのときに遭遇した問題について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;making-touch-scrolling-fast-by-default- | -web- | -google-developers&quot;&gt;Making touch scrolling fast by default  |  Web  |  Google Developers&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2017/01/scrolling-intervention&quot; title=&quot;Making touch scrolling fast by default  |  Web  |  Google Developers&quot;&gt;developers.google.com/web/updates/2017/01/scrolling-intervention&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Chrome&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;event&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
Chrome 56からtouch eventをlistenすると&lt;br&gt;
&lt;code&gt;{passive: true}&lt;/code&gt;がデフォルトとなる。&lt;br&gt;
デフォルトでは&lt;code&gt;touchstart&lt;/code&gt;の中で&lt;code&gt;event.preventDefault()&lt;/code&gt;を呼ぶと無視され警告がコンソールに表示される。&lt;br&gt;
- &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented&quot; title=&quot;Event.defaultPrevented - Web APIs | MDN&quot;&gt;Event.defaultPrevented - Web APIs | MDN&lt;/a&gt;&lt;br&gt;
- &lt;a href=&quot;https://www.chromestatus.com/features/5093566007214080&quot; title=&quot;Chrome Platform Status&quot;&gt;Chrome Platform Status&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;testing-react-applications-with-jest&quot;&gt;Testing React Applications with Jest&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://auth0.com/blog/testing-react-applications-with-jest/&quot; title=&quot;Testing React Applications with Jest&quot;&gt;auth0.com/blog/testing-react-applications-with-jest/&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;testing&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;tutorial&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
Jestを使ったReactのテストについての解説。&lt;br&gt;
インストールからテストの書き方、モックなどについて書かれている。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;es-proposal:-shared-memory-and-atomics&quot;&gt;ES proposal: Shared memory and atomics&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.2ality.com/2017/01/shared-array-buffer.html&quot; title=&quot;ES proposal: Shared memory and atomics&quot;&gt;www.2ality.com/2017/01/shared-array-buffer.html&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;proposal&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;spec&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
ES2017に入ることが決まったShared memory and atomicsについての解説。&lt;br&gt;
Shared Array BuffersでWorker(agent)とデータを共有することができる。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;implement-a-javascript-reactive-programming-library-—-part-1-–-medium&quot;&gt;Implement a JavaScript reactive programming library — part 1 – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@bohou/implement-a-javascript-reactive-programming-library-part-1-f564ac6ad789&quot; title=&quot;Implement a JavaScript reactive programming library — part 1 – Medium&quot;&gt;medium.com/@bohou/implement-a-javascript-reactive-programming-library-part-1-f564ac6ad789&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
ReactiveなJavaScriptライブラリを実装する連載記事。&lt;br&gt;
- &lt;a href=&quot;https://github.com/bhou/bouton.js&quot; title=&quot;bhou/bouton.js: A framework to build your asynchronous reactive library.&quot;&gt;bhou/bouton.js: A framework to build your asynchronous reactive library.&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;watch-out-for-undefined-state&quot;&gt;Watch Out for Undefined State&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://daveceddia.com/watch-out-for-undefined-state/&quot; title=&quot;Watch Out for Undefined State&quot;&gt;daveceddia.com/watch-out-for-undefined-state/&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
Reactコンポーネントでコンポーネント内のstateに依存しているものを、propsへ移動するリファクタリングの例。&lt;br&gt;
コンポーネントのデフォルトstateはundefinedであるという話&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;the-promise-of-a-burger-party---mariko-kosaka&quot;&gt;The Promise of a Burger Party - Mariko Kosaka&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://kosamari.com/notes/the-promise-of-a-burger-party&quot; title=&quot;The Promise of a Burger Party - Mariko Kosaka&quot;&gt;kosamari.com/notes/the-promise-of-a-burger-party&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Promises&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;図&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
Promiseをバーガーショップを例にして解説している記事。&lt;br&gt;
図解をしながらPromiseのresolveとrejectの動きについて書かれている&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;detecting-text-in-an-image-on-the-web-in-real-time---tales-of-a-developer-advocate-by-paul-kinlan&quot;&gt;Detecting text in an image on the web in real-time - Tales of a Developer Advocate by Paul Kinlan&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://paul.kinlan.me/detecting-text-in-an-image/&quot; title=&quot;Detecting text in an image on the web in real-time - Tales of a Developer Advocate by Paul Kinlan&quot;&gt;paul.kinlan.me/detecting-text-in-an-image/&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Chrome&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;WebPlatformAPI&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
画像認識、顔認識、バーコード認識、画像からテキスト認識するブラウザAPIについて&lt;br&gt;
- &lt;a href=&quot;https://wicg.github.io/shape-detection-api/&quot; title=&quot;Accelerated Shape Detection in Images&quot;&gt;Accelerated Shape Detection in Images&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;understanding-the-critical-rendering-path&quot;&gt;Understanding the Critical Rendering Path&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://bitsofco.de/understanding-the-critical-rendering-path/&quot; title=&quot;Understanding the Critical Rendering Path&quot;&gt;bitsofco.de/understanding-the-critical-rendering-path/&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
クリティカルレンダリングパスとは何かという解説。&lt;br&gt;
ブラウザがどのようなフローでレンダリングまでを行うか。&lt;br&gt;
また、開発者ツールを使ってレンダリングフローで起きているイベントを見ていく話。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;ecmascript-proposal-updates-@-2017-01-|-ecmascript-daily&quot;&gt;ECMAScript proposal updates @ 2017-01 | ECMAScript Daily&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ecmascript-daily.github.io/ecmascript/2017/01/30/ecmascript-proposals-status&quot; title=&quot;ECMAScript proposal updates @ 2017-01 | ECMAScript Daily&quot;&gt;ecmascript-daily.github.io/ecmascript/2017/01/30/ecmascript-proposals-status&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;proposal&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
2017年1月時点でのECMAScriptのProposalのStageまとめ。 2017年1月のミーティングで5つのProposalが追加され、Shared memory and atomicsはES2017に入った。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;optimizing-the-performance-of-your-react-application&quot;&gt;Optimizing the Performance of Your React Application&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://auth0.com/blog/optimizing-react/&quot; title=&quot;Optimizing the Performance of Your React Application&quot;&gt;auth0.com/blog/optimizing-react/&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;performance&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
&lt;code&gt;react-addons-perf&lt;/code&gt;を使いReactコンポーネントのパフォーマンス計測を行う話。&lt;br&gt;
また&lt;code&gt;React.PureComponent&lt;/code&gt;を使い&lt;code&gt;shouldComponentUpdate&lt;/code&gt;の判定がきちんと行われるようにしてパフォーマンス改善するという話。&lt;/p&gt;

&lt;hr&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;サイト、サービス、ドキュメント&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;knq/chromedp:-package-chromedp-is-a-faster,-simpler-way-to-drive-browsers-(chrome,-edge,-safari,-android,-etc)-without-external-dependencies-(ie,-selenium,-phantomjs,-etc).&quot;&gt;knq/chromedp: Package chromedp is a faster, simpler way to drive browsers (Chrome, Edge, Safari, Android, etc) without external dependencies (ie, Selenium, PhantomJS, etc).&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/knq/chromedp&quot; title=&quot;knq/chromedp: Package chromedp is a faster, simpler way to drive browsers (Chrome, Edge, Safari, Android, etc) without external dependencies (ie, Selenium, PhantomJS, etc).&quot;&gt;github.com/knq/chromedp&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Chrome&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;golang&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
ChromeDebugging Protocolを使ったブラウザ操作ツール&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;書籍関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;manning-|-isomorphic-development-with-javascript&quot;&gt;Manning | Isomorphic Development with JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.manning.com/books/isomorphic-development-with-javascript&quot; title=&quot;Manning | Isomorphic Development with JavaScript&quot;&gt;www.manning.com/books/isomorphic-development-with-javascript&lt;/a&gt;&lt;br&gt;
&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;isomorphic&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;book&lt;/span&gt;&lt;/p&gt;&lt;br&gt;
Isomorphic JavaScriptについての書籍。&lt;br&gt;
ブラウザとNode.jsで共有しながら、ウェブアプリケーションを作る話。&lt;br&gt;
React + Redux、Angular 2やEmberを題材にしている。&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Mon, 30 Jan 2017 23:30:24 +0900</pubDate>
        <link>https://jser.info/2017/01/30/safari-10.1-firefox51.0-type-refactoring/</link>
        <guid isPermaLink="true">https://jser.info/2017/01/30/safari-10.1-firefox51.0-type-refactoring/</guid>
        
        <category>Firefox</category>
        
        <category>Safari</category>
        
        <category>TypeScript</category>
        
        <category>Flow</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2017-01-24のJS: webpack 2正式リリース、JavaScriptの開発環境設定、2016 JS Stars</title>
        <description>&lt;p&gt;JSer.info #315 - webpack 2.xの正式版としてwebpack v2.2.0がリリースされました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v2.2.0&quot; title=&quot;Release v2.2.0 · webpack/webpack&quot;&gt;Release v2.2.0 · webpack/webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/webpack/webpack-2-2-the-final-release-76c3d43bf144&quot; title=&quot;🎉 webpack 2.2: The Final Release 🎉 – webpack – Medium&quot;&gt;🎉 webpack 2.2: The Final Release 🎉 – webpack – Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; title=&quot;webpack&quot;&gt;公式サイト&lt;/a&gt;も2.xに対応したものとなっています。&lt;br&gt;
設定ファイル周りの細かい変更が多いですが、v1からv2への移行ガイドも公開されているので合わせて見ると良いです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webpack.js.org/guides/migrating/&quot; title=&quot;Migrating from v1 to v2&quot;&gt;Migrating from v1 to v2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、webpack 2では、TreeShakingと呼ばれる機能が追加されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yosuke-furukawa.hatenablog.com/entry/2017/01/24/110152&quot; title=&quot;Demystifying webpack2 tree shaking - from scratch&quot;&gt;Demystifying webpack2 tree shaking - from scratch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今後の機能追加や改善については、投票ツールを通じて決定していくようです。&lt;br&gt;
(投票の重み付けに利用されている&lt;a href=&quot;http://azu.github.io/slide/2017/t_wada_sushi/OpenCollective.html&quot; title=&quot;Open Collective&quot;&gt;Open Collectiveについてのスライド&lt;/a&gt;を書いたので、併せてみるといいかもしれません)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webpack.js.org/vote/&quot;&gt;https://webpack.js.org/vote/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;投票のサイトを見ると今のところ次の開発候補としてはScope Hoisting(Rollupインスパイアな最適化)、Typescript周りの改善などが上がっているようです。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.satotaichi.info/modern-javascript_201701/&quot;&gt;Modern JavaScript概観、そしてElectronへ&lt;/a&gt;という記事では、JavaScriptの開発環境設定について書かれています。&lt;/p&gt;

&lt;p&gt;型、Babelのエコシステム、Lint、テスト、UIフレームワーク、CSS、アーキテクチャ、ビルドなど幅広い内容を扱っています。&lt;br&gt;
また、どのような選択肢からなぜそのツール/ライブラリを選んだのかという点について詳しく書かれています。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://risingstars2016.js.org/&quot; title=&quot;2016 JavaScript Rising Stars&quot;&gt;2016 JavaScript Rising Stars&lt;/a&gt;というサイトでは、2016年においてGitHub Starの増加率でランキングした結果がまとめられています。&lt;/p&gt;

&lt;p&gt;それぞれのリポジトリ(ライブラリやツールなど)に対する説明が書かれているので、一度見てみると良いかもしれません。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-v2.2.0-·-webpack/webpack&quot;&gt;Release v2.2.0 · webpack/webpack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v2.2.0&quot; title=&quot;Release v2.2.0 · webpack/webpack&quot;&gt;github.com/webpack/webpack/releases/tag/v2.2.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webpack&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;webpack 2.2.0正式版リリース。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://webpack.js.org/guides/migrating/&quot; title=&quot;Migrating from v1 to v2&quot;&gt;Migrating from v1 to v2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/webpack/webpack-2-2-the-final-release-76c3d43bf144#.ibgliase6&quot; title=&quot;🎉 webpack 2.2: The Final Release 🎉 – webpack – Medium&quot;&gt;🎉 webpack 2.2: The Final Release 🎉 – webpack – Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;testcafe-v0.12.0-released-|-testcafe&quot;&gt;TestCafe v0.12.0 Released | TestCafe&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://devexpress.github.io/testcafe/blog/testcafe-v0-12-0-released.html&quot; title=&quot;TestCafe v0.12.0 Released | TestCafe&quot;&gt;devexpress.github.io/testcafe/blog/testcafe-v0-12-0-released.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;testing&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;E2E&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TestCafe v0.12.0リリース。&lt;br&gt;
ベーシック認証/NTLM認証のサポート、CIでの動作改善、テストのスキップ、&lt;code&gt;test.before&lt;/code&gt;と&lt;code&gt;test.after&lt;/code&gt;の追加、ESLintプラグインの追加など&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;modern-javascript概観、そしてelectronへ&quot;&gt;Modern JavaScript概観、そしてElectronへ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.satotaichi.info/modern-javascript_201701/&quot; title=&quot;Modern JavaScript概観、そしてElectronへ&quot;&gt;blog.satotaichi.info/modern-javascript_201701/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;TypeScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Electron&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;babel&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JavaScriptの環境設定をめぐる試行について。&lt;br&gt;
TypeScriptやFlowなどの型システム、Babelのエコシステム、Lint、テストフレームワーク、UIフレームワーク、CSS、アーキテクチャ、ビルドなど。&lt;br&gt;
幅広いツール/ライブラリの中で、どのような考えで何を選んだかについて書かれている。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;アメブロ2016-~-isomorphic-javascriptの詳しい話-|-cyberagent-developers-blog-|-サイバーエージェント-デベロッパーズブログ&quot;&gt;アメブロ2016 ~ Isomorphic JavaScriptの詳しい話 | CyberAgent Developers Blog | サイバーエージェント デベロッパーズブログ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.cyberagent.co.jp/blog/archives/3513/&quot; title=&quot;アメブロ2016 ~ Isomorphic JavaScriptの詳しい話 | CyberAgent Developers Blog | サイバーエージェント デベロッパーズブログ&quot;&gt;developers.cyberagent.co.jp/blog/archives/3513/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;isomorphic&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;クライアントサイドとサーバサイドのどちらでも動くIsomorphicなJavaScriptを書くために気をつける点について。&lt;br&gt;
Reactコンポーネント、Fetch、スタイルシート、環境変数、ルーティング、表示領域の扱い，パフォーマンス計測についてなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;making-transpiled-es-modules-more-spec-compliant&quot;&gt;Making transpiled ES modules more spec-compliant&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.2ality.com/2017/01/babel-esm-spec-mode.html&quot; title=&quot;Making transpiled ES modules more spec-compliant&quot;&gt;www.2ality.com/2017/01/babel-esm-spec-mode.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ES Modulesの仕様と現在のTranspilerの挙動について。&lt;br&gt;
ECMAScriptとNode.jsのモジュールのInteroperabilityについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;module-bundling-and-webpack-in-simple-terms&quot;&gt;Module Bundling and Webpack in Simple Terms&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://arianv.com/post/Module-Bundling-and-Webpack-in-Simple-Terms/&quot; title=&quot;Module Bundling and Webpack in Simple Terms&quot;&gt;arianv.com/post/Module-Bundling-and-Webpack-in-Simple-Terms/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webpack&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;tutorial&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;webpackがどのようにモジュールをbundleしているかを丁寧に解説した記事&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;typescript-2.1:-mapped-types-|-marius-schulz&quot;&gt;TypeScript 2.1: Mapped Types | Marius Schulz&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.mariusschulz.com/2017/01/20/typescript-2-1-mapped-types&quot; title=&quot;TypeScript 2.1: Mapped Types | Marius Schulz&quot;&gt;blog.mariusschulz.com/2017/01/20/typescript-2-1-mapped-types&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;TypeScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TypeScript 2.1で入ったMapped Typesについて。&lt;br&gt;
&lt;code&gt;Object.freeze&lt;/code&gt;などを例にMapped Typesの使い方を解説している&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;dragons-when-upgrading-from-angular-2.1.x-to-2.4.x-–-medium&quot;&gt;Dragons when upgrading from Angular 2.1.x to 2.4.x – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@abookone/dragons-when-upgrading-from-angular-2-1-x-to-2-4-x-530de5a763cb&quot; title=&quot;Dragons when upgrading from Angular 2.1.x to 2.4.x – Medium&quot;&gt;medium.com/@abookone/dragons-when-upgrading-from-angular-2-1-x-to-2-4-x-530de5a763cb&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;AngularJS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Angular 2.1から2.4へのアップデートにおけるハマりどころについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;vue-+-vuex-—-getting-started-–-medium&quot;&gt;Vue + Vuex — Getting started – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@bradfmd/vue-vuex-getting-started-f78c03d9f65&quot; title=&quot;Vue + Vuex — Getting started – Medium&quot;&gt;medium.com/@bradfmd/vue-vuex-getting-started-f78c03d9f65&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Vue&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;tutorial&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Vuexについての導入チュートリアル&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;server-side-rendering-shootout-with-marko,-preact,-rax,-react-and-vue&quot;&gt;Server-side Rendering Shootout with Marko, Preact, Rax, React and Vue&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/server-side-rendering-shootout-with-marko-preact-rax-react-and-vue-25e1ae17800f&quot; title=&quot;Server-side Rendering Shootout with Marko, Preact, Rax, React and Vue&quot;&gt;hackernoon.com/server-side-rendering-shootout-with-marko-preact-rax-react-and-vue-25e1ae17800f&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;DOM&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;template&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;UIライブラリ/テンプレートエンジンであるMarkoのサーバサイドレンダリングの高速化手法について。&lt;br&gt;
Marko v4ではブラウザとサーバで出力方式を変えている。&lt;br&gt;
クライアントサイドではVirtual DOMを使い、サーバサイドでは文字列結合をベースとした出力を使い分けている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/mlrawlings/8b67bee58df45709e232f689b873e1d1&quot; title=&quot;Marko v4 Multiple Compilation Targets&quot;&gt;Marko v4 Multiple Compilation Targets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/taobaofed/server-side-rendering-comparison/pull/11&quot; title=&quot;feat: add marko by mlrawlings · Pull Request #11 · taobaofed/server-side-rendering-comparison&quot;&gt;feat: add marko by mlrawlings · Pull Request #11 · taobaofed/server-side-rendering-comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marko-js/marko/blob/master/ROADMAP.md&quot; title=&quot;marko/ROADMAP.md at master · marko-js/marko&quot;&gt;marko/ROADMAP.md at master · marko-js/marko&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;3-new-css-features-to-learn-in-2017&quot;&gt;3 New CSS Features to Learn in 2017&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://bitsofco.de/3-new-css-features-to-learn-in-2017/&quot; title=&quot;3 New CSS Features to Learn in 2017&quot;&gt;bitsofco.de/3-new-css-features-to-learn-in-2017/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;最近のブラウザで利用できる新しいCSSの機能について。&lt;br&gt;
Feature Queries、Grid Layout、CSS Variables&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;es2016-/-es2017の最新動向を追ってみた---qiita&quot;&gt;ES2016 / ES2017の最新動向を追ってみた - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/yuyake0084/items/3c901f37ed7333d4da16&quot; title=&quot;ES2016 / ES2017の最新動向を追ってみた - Qiita&quot;&gt;qiita.com/yuyake0084/items/3c901f37ed7333d4da16&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ES2016、2017で追加された構文や機能について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;introduction-to-webassembly-—-rasmus-andersson&quot;&gt;Introduction to WebAssembly — Rasmus Andersson&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://rsms.me/wasm-intro&quot; title=&quot;Introduction to WebAssembly — Rasmus Andersson&quot;&gt;rsms.me/wasm-intro&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;WebAssembly&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;WebAssemblyの中身を見ていく話。&lt;br&gt;
セマンティクス、type section、メモリアドレス、JavaScriptのAPIについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;functional-programing-in-javascript-|-lifelong-learning&quot;&gt;Functional Programing in Javascript | Lifelong Learning&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://vmayakumar.wordpress.com/2017/01/17/functional-programing-in-javascript/&quot; title=&quot;Functional Programing in Javascript | Lifelong Learning&quot;&gt;vmayakumar.wordpress.com/2017/01/17/functional-programing-in-javascript/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;関数型プログラミング&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JavaScriptでの関数型プログラミングについて。&lt;br&gt;
Adequate/mostly-adequate-guideを元にしている&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MostlyAdequate/mostly-adequate-guide&quot; title=&quot;MostlyAdequate/mostly-adequate-guide: Mostly adequate guide to FP (in javascript)&quot;&gt;MostlyAdequate/mostly-adequate-guide: Mostly adequate guide to FP (in javascript)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;サイト、サービス、ドキュメント&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;2016-javascript-rising-stars&quot;&gt;2016 JavaScript Rising Stars&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://risingstars2016.js.org/&quot; title=&quot;2016 JavaScript Rising Stars&quot;&gt;risingstars2016.js.org/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;github&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2016年にGitHubのstarの増加率でランキングをつけた結果について。&lt;br&gt;
それぞれのライブラリやツールについても簡単に解説されている&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;voca:-the-javascript-string-library&quot;&gt;Voca: The JavaScript string library&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://vocajs.com/&quot; title=&quot;Voca: The JavaScript string library&quot;&gt;vocajs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;文字列操作系のUtils集ライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;lorenzofox3/zora:-a-less-than-200-lines-of-code-javascript-test-harness-for-nodejs-and-the-browser&quot;&gt;lorenzofox3/zora: A less than 200 lines of code javascript test harness for nodejs and the browser&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/lorenzofox3/zora&quot; title=&quot;lorenzofox3/zora: A less than 200 lines of code javascript test harness for nodejs and the browser&quot;&gt;github.com/lorenzofox3/zora&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;testing&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Generatorを使った小さなテストフレームワーク&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;alibaba/rax:-a-universal-react-compatible-render-engine.&quot;&gt;alibaba/rax: A universal React-compatible render engine.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/rax&quot; title=&quot;alibaba/rax: A universal React-compatible render engine.&quot;&gt;github.com/alibaba/rax&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ReactライクなAPIを持つUniversalなViewライブラリ。&lt;br&gt;
ブラウザだけではなく、アプリ(Weex)やサーバでも動作させることが目的。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alibaba/rax/blob/master/docs/difference-with-react.md&quot; title=&quot;rax/difference-with-react.md at master · alibaba/rax&quot;&gt;rax/difference-with-react.md at master · alibaba/rax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://weex-project.io/&quot; title=&quot;Weex&quot;&gt;Weex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alibaba/rax/issues/81&quot; title=&quot;(question) Inferno/Preact comparison · Issue #81 · alibaba/rax&quot;&gt;(question) Inferno/Preact comparison · Issue #81 · alibaba/rax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 10:33:00 +0900</pubDate>
        <link>https://jser.info/2017/01/24/webpack-2-javascript-2016-js-star/</link>
        <guid isPermaLink="true">https://jser.info/2017/01/24/webpack-2-javascript-2016-js-star/</guid>
        
        <category>webpack</category>
        
        <category>JavaScript</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2017-01-17のJS: Safari Technology Preview Release 21、Protractor 5.0.0</title>
        <description>&lt;p&gt;JSer.info #314 - &lt;a href=&quot;https://webkit.org/blog/7265/release-notes-for-safari-technology-preview-21/&quot; title=&quot;Safari Technology Preview Release 21&quot;&gt;Safari Technology Preview Release 21&lt;/a&gt;がリリースされました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;module&amp;quot;&amp;gt;&lt;/code&gt;をサポートし、ECMAScript modulesが利用できるようになりました。&lt;br&gt;
 ECMAScript modulesについては次の記事にSafariでの設定も書かれているので合わせて見てみると良いです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.hospodarets.com/native-ecmascript-modules-the-first-overview&quot; title=&quot;Native ECMAScript modules - the first overview&quot;&gt;Native ECMAScript modules - the first overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;E2Eテストフレームワークの&lt;a href=&quot;http://www.protractortest.org/&quot; title=&quot;Protractor&quot;&gt;Protractor&lt;/a&gt; &lt;a href=&quot;https://github.com/angular/protractor/blob/5.0.0/CHANGELOG.md&quot; title=&quot;5.0.0&quot;&gt;5.0.0&lt;/a&gt;がリリースされました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/protractor/blob/5.0.0/CHANGELOG.md&quot; title=&quot;protractor/CHANGELOG.md at 5.0.0 · angular/protractor&quot;&gt;protractor/CHANGELOG.md at 5.0.0 · angular/protractor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/blob/master/javascript/node/selenium-webdriver/CHANGES.md#v300&quot; title=&quot;selenium-webdriver&quot;&gt;selenium-webdriver v3.x&lt;/a&gt;にアップデートされたため、APIの変更などが含まれています。&lt;br&gt;
また、動作に必要なNode.jsのバージョンが v6.9.x となっています。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;お知らせ&quot;&gt;お知らせ&lt;/h2&gt;

&lt;p&gt;1月15日にJSer.info 6周年記念イベントを開催しました。&lt;br&gt;
当日に発表されたスライドや議事録などは次のページにまとまっているので、よろしければ見てみてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.info/2017/01/15/jser-info-6years/&quot; title=&quot;JSer.info 6周年記念イベントを開催しました - JSer.info&quot;&gt;JSer.info 6周年記念イベントを開催しました - JSer.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-v1.4.0-·-karma-runner/karma&quot;&gt;Release v1.4.0 · karma-runner/karma&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/karma-runner/karma/releases/tag/v1.4.0&quot; title=&quot;Release v1.4.0 · karma-runner/karma&quot;&gt;github.com/karma-runner/karma/releases/tag/v1.4.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;testing&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Karma v1.4.0リリース。&lt;br&gt;
HTTP moduleを設定することで&lt;code&gt;node-http2&lt;/code&gt;などを利用できるように、定数を&lt;code&gt;karma.constants&lt;/code&gt;としてexportするようになるなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;mobx/changelog.md-at-3.0.0-·-mobxjs/mobx&quot;&gt;mobx/CHANGELOG.md at 3.0.0 · mobxjs/mobx&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mobxjs/mobx/blob/3.0.0/CHANGELOG.md&quot; title=&quot;mobx/CHANGELOG.md at 3.0.0 · mobxjs/mobx&quot;&gt;github.com/mobxjs/mobx/blob/3.0.0/CHANGELOG.md&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;MobX 3リリース。&lt;br&gt;
&lt;code&gt;observable&lt;/code&gt;が各type毎にファクトリメソッドを追加、受け取ったオブジェクトをcloneするように、エラーハンドリングの改善など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lealog.hateblo.jp/entry/2017/01/11/140607&quot; title=&quot;MobX 3.0.0 の変更点について - console.lealog();&quot;&gt;MobX 3.0.0 の変更点について - console.lealog();&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@mweststrate/mobx-3-released-unpeeling-the-onion-ca877382f443&quot; title=&quot;MobX 3 released: Unpeeling the onion – Medium&quot;&gt;MobX 3 released: Unpeeling the onion – Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-notes-for-safari-technology-preview-21-|-webkit&quot;&gt;Release Notes for Safari Technology Preview 21 | WebKit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://webkit.org/blog/7265/release-notes-for-safari-technology-preview-21/&quot; title=&quot;Release Notes for Safari Technology Preview 21 | WebKit&quot;&gt;webkit.org/blog/7265/release-notes-for-safari-technology-preview-21/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;webkit&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;safari&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Safari Technology Preview Release 21リリース。&lt;br&gt;
Concurrent GCの有効化、&lt;code&gt;&amp;lt;script type=&amp;quot;module&amp;quot;&amp;gt;&lt;/code&gt;の有効化、&lt;code&gt;global&lt;/code&gt;がサポートされたがbreak the webのためbackoutなど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://trac.webkit.org/changeset/210570&quot; title=&quot;チェンジセット 210570 – WebKit&quot;&gt;チェンジセット 210570 – WebKit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/proposal-global/issues/20&quot; title=&quot;global breaks flickr.com · Issue #20 · tc39/proposal-global&quot;&gt;global breaks flickr.com · Issue #20 · tc39/proposal-global&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.hospodarets.com/native-ecmascript-modules-the-first-overview&quot; title=&quot;Native ECMAScript modules - the first overview&quot;&gt;Native ECMAScript modules - the first overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;protractor/changelog.md-at-5.0.0-·-angular/protractor&quot;&gt;protractor/CHANGELOG.md at 5.0.0 · angular/protractor&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/angular/protractor/blob/5.0.0/CHANGELOG.md&quot; title=&quot;protractor/CHANGELOG.md at 5.0.0 · angular/protractor&quot;&gt;github.com/angular/protractor/blob/5.0.0/CHANGELOG.md&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Protractor 5.0.0リリース。&lt;br&gt;
&lt;code&gt;selenium-webdriver&lt;/code&gt; 3.0.xへのアップデートに伴う破壊的変更、未知のフラグはエラーを投げるようになるなど&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;typescript:-the-missing-introduction&quot;&gt;TypeScript: the missing introduction&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://toddmotto.com/typescript-the-missing-introduction&quot; title=&quot;TypeScript: the missing introduction&quot;&gt;toddmotto.com/typescript-the-missing-introduction&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;TypeScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TypeScriptという言語がどのような仕組みで動いているのか、JavaScriptに対してどのような役割をもっているのかという言語入門以前の話を丁寧にかかれている。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;practical-redux-·-mark&amp;#x27;s-dev-blog&quot;&gt;Practical Redux · Mark&amp;#x27;s Dev Blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.isquaredsoftware.com/series/practical-redux/&quot; title=&quot;Practical Redux · Mark&amp;#39;s Dev Blog&quot;&gt;blog.isquaredsoftware.com/series/practical-redux/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;redux&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;tutorial&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ゲームの管理ツールを題材にしたReduxについての連載。&lt;br&gt;
&lt;code&gt;Redux-ORM&lt;/code&gt;を使ったモデルの作成、Semantic-UIでのUI作成、ディレクトリ構造、デバッグ方法、コンポーネントのリファクタリングなどについて扱っている&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;side-effects-in-js-promise-chains-–-medium&quot;&gt;Side Effects in JS Promise chains – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@gabrielcatalin/side-effects-in-js-promise-chains-7db50b6302f3&quot; title=&quot;Side Effects in JS Promise chains – Medium&quot;&gt;medium.com/@gabrielcatalin/side-effects-in-js-promise-chains-7db50b6302f3&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Promises&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Promise chainに副作用がある処理を含める際に処理が途切れてしまう問題について。&lt;br&gt;
&lt;code&gt;passThrough()&lt;/code&gt;のような高階関数を用意し副作用を扱うことで、明示しつつバグを減らす方法について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;typedarray-or-dataview:-understanding-byte-order-★-mozilla-hacks-–-the-web-developer-blog&quot;&gt;TypedArray or DataView: Understanding byte order ★ Mozilla Hacks – the Web developer blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hacks.mozilla.org/2017/01/typedarray-or-dataview-understanding-byte-order/&quot; title=&quot;TypedArray or DataView: Understanding byte order ★ Mozilla Hacks – the Web developer blog&quot;&gt;hacks.mozilla.org/2017/01/typedarray-or-dataview-understanding-byte-order/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;、&lt;code&gt;TypedArray&lt;/code&gt;、&lt;code&gt;DataView&lt;/code&gt;についての解説。&lt;br&gt;
&lt;code&gt;ArrayBuffer&lt;/code&gt;がバイナリのデータ構造であり、&lt;em&gt;view&lt;/em&gt;として&lt;code&gt;TypedArray&lt;/code&gt;と&lt;code&gt;DataView&lt;/code&gt;があるという話&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;サイト、サービス、ドキュメント&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;web-components-v1---the-next-generation-|-web-|-google-developers&quot;&gt;Web Components v1 - the next generation  |  Web  |  Google Developers&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2017/01/webcomponents-org&quot; title=&quot;Web Components v1 - the next generation  |  Web  |  Google Developers&quot;&gt;developers.google.com/web/updates/2017/01/webcomponents-org&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;WebComponents&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Web Components v1に伴い、&lt;br&gt;
webcomponents.org がアップデートされた&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;arqex/freezer:-a-tree-data-structure-that-emits-events-on-updates,-even-if-the-modification-is-triggered-by-one-of-the-leaves,-making-it-easier-to-think-in-a-reactive-way.&quot;&gt;arqex/freezer: A tree data structure that emits events on updates, even if the modification is triggered by one of the leaves, making it easier to think in a reactive way.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/arqex/freezer&quot; title=&quot;arqex/freezer: A tree data structure that emits events on updates, even if the modification is triggered by one of the leaves, making it easier to think in a reactive way.&quot;&gt;github.com/arqex/freezer&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Immutable.jsのようなImmutableなデータ構造を扱うライブラリ。&lt;br&gt;
変更を通知するイベントやImmutable.jsよりもファイルサイズが小さい。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;siema---lightweight-and-simple-carousel-with-no-dependencies&quot;&gt;Siema - Lightweight and simple carousel with no dependencies&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pawelgrzybek.com/siema/&quot; title=&quot;Siema - Lightweight and simple carousel with no dependencies&quot;&gt;pawelgrzybek.com/siema/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;依存がないカヌーセルライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;angus-c/just:-a-library-of-dependency-free-utilities-that-do-just-do-one-thing.&quot;&gt;angus-c/just: A library of dependency-free utilities that do just do one thing.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/angus-c/just&quot; title=&quot;angus-c/just: A library of dependency-free utilities that do just do one thing.&quot;&gt;github.com/angus-c/just&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;依存がない小さなユーティリティライブラリ集。&lt;br&gt;
それぞれの機能を個別のモジュールとしてインストールして利用できる。&lt;br&gt;
それぞれの&lt;code&gt;just-*&lt;/code&gt;モジュール間でも依存関係がない作りとなっている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@angustweets/just-a12d54221f65&quot; title=&quot;Why I wrote Just. – Medium&quot;&gt;Why I wrote Just. – Medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angus-c/just/issues/4&quot; title=&quot;Just vs lodash · Issue #4 · angus-c/just&quot;&gt;Just vs lodash · Issue #4 · angus-c/just&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;yamafaktory/shrimpit:-shrimpit-is-a-small-cli-analysis-tool-for-checking-unused-javascript,-jsx-&amp;amp;-vue-templates-es6-exports-in-your-project.&quot;&gt;yamafaktory/shrimpit: Shrimpit is a small CLI analysis tool for checking unused JavaScript, JSX &amp;amp; Vue templates ES6 exports in your project.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yamafaktory/shrimpit&quot; title=&quot;yamafaktory/shrimpit: Shrimpit is a small CLI analysis tool for checking unused JavaScript, JSX &amp;amp; Vue templates ES6 exports in your project.&quot;&gt;github.com/yamafaktory/shrimpit&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;各モジュールのimport/exportを一覧し、未使用なモジュールを表示出来るCLI&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;katat/vbot:-json-based-visual-regression-testing-tool,-particularly-useful-for-spa-or-complicated-web-app&quot;&gt;katat/vbot: JSON based visual regression testing tool, particularly useful for SPA or complicated web app&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/katat/vbot&quot; title=&quot;katat/vbot: JSON based visual regression testing tool, particularly useful for SPA or complicated web app&quot;&gt;github.com/katat/vbot&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;testing&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JSONベースのリグレッションテストツール。&lt;br&gt;
JSONでシナリオを作成して、スクリーンショットの画像比較ができる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://katat.github.io/2017/01/09/vbot/&quot; title=&quot;vbot - JSON based visual regression tester - Kata Tech Life&quot;&gt;vbot - JSON based visual regression tester - Kata Tech Life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;landmarks-browser-extension&quot;&gt;Landmarks browser extension&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://matatk.agrip.org.uk/landmarks/&quot; title=&quot;Landmarks browser extension&quot;&gt;matatk.agrip.org.uk/landmarks/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;firefox&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Chrome&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;WAI-ARIA&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Extension&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;WAI-ARIAのlandmarkナビゲーションを有効化するブラウザ拡張&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;tsayen/dom-to-image:-generates-an-image-from-a-dom-node-using-html5-canvas&quot;&gt;tsayen/dom-to-image: Generates an image from a DOM node using HTML5 canvas&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tsayen/dom-to-image&quot; title=&quot;tsayen/dom-to-image: Generates an image from a DOM node using HTML5 canvas&quot;&gt;github.com/tsayen/dom-to-image&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;SVG&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SVGの&lt;code&gt;&amp;lt;foreignObject&amp;gt;&lt;/code&gt;を使いHTMLを描画したものをCanvas経由で画像として取得するライブラリ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/HTML/Canvas/Drawing_DOM_objects_into_a_canvas&quot; title=&quot;DOM オブジェクトを Canvas に描画する - HTML | MDN&quot;&gt;DOM オブジェクトを Canvas に描画する - HTML | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;modclean/modclean:-remove-unwanted-files-and-directories-from-your-node_modules-folder&quot;&gt;ModClean/modclean: Remove unwanted files and directories from your node_modules folder&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ModClean/modclean&quot; title=&quot;ModClean/modclean: Remove unwanted files and directories from your node\_modules folder&quot;&gt;github.com/ModClean/modclean&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;node_modulesから不要なファイルを削除することができるツール&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 09:49:00 +0900</pubDate>
        <link>https://jser.info/2017/01/17/safari-technology-preview-release-21-protractor-5.0.0/</link>
        <guid isPermaLink="true">https://jser.info/2017/01/17/safari-technology-preview-release-21-protractor-5.0.0/</guid>
        
        <category>Safari</category>
        
        <category>testing</category>
        
        <category>E2E</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>JSer.info 6周年記念イベントを開催しました</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://jser.connpass.com/event/46997/&quot; title=&quot;JSer.info 6周年と300回記念イベント&quot;&gt;JSer.info 6周年と300回記念イベント&lt;/a&gt;を開催しました。&lt;/p&gt;

&lt;p&gt;参加して頂いた皆さん、発表して頂いた皆さんありがとうございます。&lt;/p&gt;

&lt;h3 id=&quot;発表内容&quot;&gt;発表内容&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://azu.github.io/slide/2017/jser_info/jser_info_6years.html&quot;&gt;JSer.info 6周年イベント&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/azu_re&quot;&gt;@azu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://azu.github.io/slide/2017/jser_info/how_to_make_jser_info.html&quot;&gt;JSer.infoの作り方&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/azu_re&quot;&gt;@azu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1N0waGxmspbLyRf6a6hG5oXk77z69YirgW21_Cegxnq0/edit#slide=id.p&quot;&gt;ECMA-402を知ってますか？&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/makoto_kato&quot;&gt;@makoto_kato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/potato4d/2017nian-falsejavascriptto-hurontoendofalsele-simikata-number-jserinfo&quot;&gt;2017年のJavaScriptと フロントエンドの楽しみかた #jserinfo // Speaker Deck&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/potato4d&quot;&gt;@potato4d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1rwmyRW99N4ZAPM5gyDGjgv0yvJXVATUom6rNxAZrYvQ/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000#slide=id.g1aed898fe2_0_156&quot;&gt;A piece of potential of Cognitive Services&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/ovrmrw&quot;&gt;@ovrmrw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://slides.youchan.org/JSerInfo6th&quot;&gt;Opalのすすめ&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/youchan&quot;&gt;@youchan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/rlaxogns/how-amp-work&quot;&gt;HOW AMP WORKS&lt;/a&gt; - &lt;a href=&quot;https://github.com/kishu&quot; title=&quot;kishu&quot;&gt;@kishu&lt;/a&gt; 翻訳: &lt;a href=&quot;https://twitter.com/purewish&quot; title=&quot;@purewish&quot;&gt;@purewish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;with Many LT&lt;/p&gt;

&lt;p&gt;以下、&lt;a href=&quot;https://paper.dropbox.com/doc/JSer.info-6-4ko0NvdzqpYj5Rt6TvdJi&quot; title=&quot;JSer.info 6周年記念イベント - Paper&quot;&gt;JSer.info 6周年記念イベント - Paper&lt;/a&gt;に書かれた議事録です。&lt;/p&gt;

&lt;p&gt;議事録を取って頂いた&lt;a href=&quot;https://twitter.com/suzuki&quot; title=&quot;@suzuki&quot;&gt;@suzuki&lt;/a&gt;さんありがとうございます。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;jser.infoについて---azu&quot;&gt;JSer.infoについて - azu&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;http://azu.github.io/slide/2017/jser_info/jser_info_6years.html&quot;&gt;JSer.info 6周年イベント&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;JSer.info、明日で6周年

&lt;ul&gt;
&lt;li&gt;1000記事/年くらい紹介&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;紹介記事の傾向

&lt;ul&gt;
&lt;li&gt;JSONファイルで管理&lt;/li&gt;
&lt;li&gt;jser/stat-js に入れている&lt;/li&gt;
&lt;li&gt;MIT ライセンス&lt;/li&gt;
&lt;li&gt;このスライド用にダッシュボード作った&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dashboard のデータ

&lt;ul&gt;
&lt;li&gt;ドメイン別&lt;/li&gt;
&lt;li&gt;GitHub が多い&lt;/li&gt;
&lt;li&gt;リリースノートが書かれる&lt;/li&gt;
&lt;li&gt;ブログ系ドメインが変わってきた

&lt;ul&gt;
&lt;li&gt;はてなダイアリー&lt;/li&gt;
&lt;li&gt;下がってきた&lt;/li&gt;
&lt;li&gt;はてなブログ&lt;/li&gt;
&lt;li&gt;最近は Medium / Qiita が増えてきた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Qiita / Medium

&lt;ul&gt;
&lt;li&gt;Qiita: 日本語圏&lt;/li&gt;
&lt;li&gt;Medium: それ以外の言語圏&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自ドメインに書いている人が減りつつある

&lt;ul&gt;
&lt;li&gt;プラットフォームのほうがコメントなど貰いやすい&lt;/li&gt;
&lt;li&gt;人だけでなくタグでも追えるのがプラットフォーム&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プラットフォーム以外

&lt;ul&gt;
&lt;li&gt;SNS、SBM、Echo JS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;情報を投げる場所

&lt;ul&gt;
&lt;li&gt;jser/ping&lt;/li&gt;
&lt;li&gt;URL、説明文などをPOSTできる&lt;/li&gt;
&lt;li&gt;投げると勝手に GitHub Issue が立つ&lt;/li&gt;
&lt;li&gt;pull request を投げるものも作ったが誰も使ってくれなかったので、よりカジュアルなものに&lt;/li&gt;
&lt;li&gt;自分用でも使っている&lt;/li&gt;
&lt;li&gt;lambda でサーバレス（かっこいいな）&lt;/li&gt;
&lt;li&gt;投稿フロー&lt;/li&gt;
&lt;li&gt;投稿タイミング、ある程度数が貯まったらボットが通知&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;韓国語版

&lt;ul&gt;
&lt;li&gt;今日は韓国からゲスト参加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ECMAScript Diary

&lt;ul&gt;
&lt;li&gt;個人の日記&lt;/li&gt;
&lt;li&gt;ECMAScript のみを扱っている&lt;/li&gt;
&lt;li&gt;おそらく唯一の専門サイト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今後

&lt;ul&gt;
&lt;li&gt;週一の記事以外にトピックベースの記事を書いてみたい&lt;/li&gt;
&lt;li&gt;時間コストはかけたくない&lt;/li&gt;
&lt;li&gt;仕組み化が課題
#### Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q. pull request少ないのは本当に少ないのか？&lt;/li&gt;
&lt;li&gt;A. 修正はそこそこ。記事の投稿はほとんどなかった。ちょっと面倒臭いフローだった&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;jser.infoの作り方---azu&quot;&gt;JSer.infoの作り方 - azu&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;http://azu.github.io/slide/2017/jser_info/how_to_make_jser_info.html&quot;&gt;JSer.infoの作り方&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;去年のまとめ

&lt;ul&gt;
&lt;li&gt;JavaScript 情報ってなんだっけ？&lt;/li&gt;
&lt;li&gt;コミュニティの問題&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JSer.infoの目的

&lt;ul&gt;
&lt;li&gt;整理して発信&lt;/li&gt;
&lt;li&gt;紹介でなく知ってもらう&lt;/li&gt;
&lt;li&gt;継続的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ゴール

&lt;ul&gt;
&lt;li&gt;興味ある人に知ってもらう&lt;/li&gt;
&lt;li&gt;現状を正確に伝える&lt;/li&gt;
&lt;li&gt;更新コストを低く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ワークフロー&lt;/li&gt;
&lt;li&gt;目的を満たすために

&lt;ul&gt;
&lt;li&gt;誤った情報を知らせるのは嫌だ&lt;/li&gt;
&lt;li&gt;文字は人によって感じ方が違う&lt;/li&gt;
&lt;li&gt;誤解を生まないように&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;みる、調べる

&lt;ul&gt;
&lt;li&gt;JS 以外でも同じやり方が可能&lt;/li&gt;
&lt;li&gt;見る&lt;/li&gt;
&lt;li&gt;見る、気づく

&lt;ul&gt;
&lt;li&gt;いろいろなところを見る&lt;/li&gt;
&lt;li&gt;自分が見るところを集約&lt;/li&gt;
&lt;li&gt;情報不足、情報過多はうまくいかない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GitHub

&lt;ul&gt;
&lt;li&gt;開発基盤、重要&lt;/li&gt;
&lt;li&gt;ECMAScript の仕様策定も GitHub &lt;/li&gt;
&lt;li&gt;GitHub Notification が崩壊w&lt;/li&gt;
&lt;li&gt;リポジトリを Watch&lt;/li&gt;
&lt;li&gt;Star はもっと気軽にやっている

&lt;ul&gt;
&lt;li&gt;starWatcher&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GitHub を Twitter で見る&lt;/li&gt;
&lt;li&gt;AWS Lamda で Activity を bot で Twitter へ流す&lt;/li&gt;
&lt;li&gt;見逃したくない情報は何度も流れるようにしている&lt;/li&gt;
&lt;li&gt;Twitter + RSS + Pocket とか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RSS

&lt;ul&gt;
&lt;li&gt;LDRを使っている&lt;/li&gt;
&lt;li&gt;3213 feeds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まとめ

&lt;ul&gt;
&lt;li&gt;見る&lt;/li&gt;
&lt;li&gt;自分が見るところへ集約&lt;/li&gt;
&lt;li&gt;多すぎる情報を整理する&lt;/li&gt;
&lt;li&gt;調べる&lt;/li&gt;
&lt;li&gt;ググる

&lt;ul&gt;
&lt;li&gt;えいごで検索&lt;/li&gt;
&lt;li&gt;日付で絞る&lt;/li&gt;
&lt;li&gt;URL で検索&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GitHub検索

&lt;ul&gt;
&lt;li&gt;検索演算子を活用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;関連検索

&lt;ul&gt;
&lt;li&gt;その情報が新しいか、正しいか&lt;/li&gt;
&lt;li&gt;URLで検索して、引用しているサイトを見る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;感情判定の例

&lt;ul&gt;
&lt;li&gt;”感情 判定”で検索、、、&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GitHubでもリンクを探る

&lt;ul&gt;
&lt;li&gt;古いライブラリの代替などだとREADMEに書かれていたり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;専門の検索エンジン

&lt;ul&gt;
&lt;li&gt;Libraries.io&lt;/li&gt;
&lt;li&gt;npm trends&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;どこで専門サイトを見つける？

&lt;ul&gt;
&lt;li&gt;awesome&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人は知りすぎると動けなくなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;行動

&lt;ul&gt;
&lt;li&gt;検証&lt;/li&gt;
&lt;li&gt;本当なのか？&lt;/li&gt;
&lt;li&gt;なぜ検証が必要か？

&lt;ul&gt;
&lt;li&gt;必ずしも直感は正しくない&lt;/li&gt;
&lt;li&gt;作者の説明が正しいとは限らない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;どうやって検証

&lt;ul&gt;
&lt;li&gt;コードを読む&lt;/li&gt;
&lt;li&gt;パフォーマンス系は動かさないと分からない&lt;/li&gt;
&lt;li&gt;特定のエッジケースでn倍速いとか。&lt;/li&gt;
&lt;li&gt;clone して動かすsnippetを用意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;変更点を見つける

&lt;ul&gt;
&lt;li&gt;ChangeLog, リリースノートを見る&lt;/li&gt;
&lt;li&gt;Issue/p-r を見る&lt;/li&gt;
&lt;li&gt;commit を見る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;全ては検証できない

&lt;ul&gt;
&lt;li&gt;時間、コスト的問題&lt;/li&gt;
&lt;li&gt;不確実性があれば掲載をスルー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;説明&lt;/li&gt;
&lt;li&gt;postem（Electronクライアント）を作った、それを使って投稿&lt;/li&gt;
&lt;li&gt;説明文

&lt;ul&gt;
&lt;li&gt;言葉は人によって解釈が違う&lt;/li&gt;
&lt;li&gt;JSer.infoで気にしていること&lt;/li&gt;
&lt;li&gt;整理・正確・現状・中立・関連性・客観的&lt;/li&gt;
&lt;li&gt;使いたくない言葉もある&lt;/li&gt;
&lt;li&gt;煽る系&lt;/li&gt;
&lt;li&gt;意図的に避けている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JSAwards

&lt;ul&gt;
&lt;li&gt;中止になった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JSer.infoで使う言葉

&lt;ul&gt;
&lt;li&gt;特徴、目的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CODE OF CONDUCT

&lt;ul&gt;
&lt;li&gt;その場所をどうやって扱って欲しいかを表明する&lt;/li&gt;
&lt;li&gt;jser.info/CODEOFCONDUCT.md&lt;/li&gt;
&lt;li&gt;基本的に中立的な立場を表明している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;このイベントもCoCを定義している&lt;/li&gt;
&lt;li&gt;言葉の難しさ&lt;/li&gt;
&lt;li&gt;正しいことを言っても正しく伝わるとは限らない

&lt;ul&gt;
&lt;li&gt;正しいことを言う != 正しく伝える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;言葉とツール&lt;/li&gt;
&lt;li&gt;機械的に弾く&lt;/li&gt;
&lt;li&gt;textlint というツール

&lt;ul&gt;
&lt;li&gt;毎回説明文をチェック&lt;/li&gt;
&lt;li&gt;引っかかれば修正もしくは掲載を諦める&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;単語感情極性対応表

&lt;ul&gt;
&lt;li&gt;0に近いほど中立&lt;/li&gt;
&lt;li&gt;記事ごとに出してみた&lt;/li&gt;
&lt;li&gt;-0.216 くらいだった&lt;/li&gt;
&lt;li&gt;どんな言語でもネガティブなほうがポジティブより多い傾向&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まとめ&lt;/li&gt;
&lt;li&gt;説明は場所・対象により正しさが異なる&lt;/li&gt;
&lt;li&gt;正しい事実を簡単に説明するのが難しい&lt;/li&gt;
&lt;li&gt;機械的チェック&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;共有

&lt;ul&gt;
&lt;li&gt;一定数貯まったらbotが通知&lt;/li&gt;
&lt;li&gt;JSer.infoのアーカイブからピックアップして公開&lt;/li&gt;
&lt;li&gt;継続性&lt;/li&gt;
&lt;li&gt;更新コストを小さく&lt;/li&gt;
&lt;li&gt;ゴールができるだけ短く連続的に

&lt;ul&gt;
&lt;li&gt;JSer.infoは週一くらいでPOSTするゴール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;長すぎるゴールの問題&lt;/li&gt;
&lt;li&gt;解決が難しくなる&lt;/li&gt;
&lt;li&gt;不確実性のコーン&lt;/li&gt;
&lt;li&gt;直感と予想は一致しない&lt;/li&gt;
&lt;li&gt;一度やめると再開が難しい

&lt;ul&gt;
&lt;li&gt;短ければ再開も簡単&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;小さく作って小さく更新&lt;/li&gt;
&lt;li&gt;一日で1週間分の更新は難しい

&lt;ul&gt;
&lt;li&gt;細かく&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;毎日作業&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;イテレーションのコスト

&lt;ul&gt;
&lt;li&gt;無コストではないけど、コストは小さく&lt;/li&gt;
&lt;li&gt;ワークフローは一方通行に&lt;/li&gt;
&lt;li&gt;Flux の図と同じ（w）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;あなたもJSer.infoを作ってみませんか？

&lt;ul&gt;
&lt;li&gt;jser/ping&lt;/li&gt;
&lt;li&gt;jser/report&lt;/li&gt;
&lt;li&gt;jser/jser.github.io&lt;/li&gt;
&lt;li&gt;jser/jser.info - Gitter&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まとめ

&lt;ul&gt;
&lt;li&gt;その場の知識はそこまで重要ではない&lt;/li&gt;
&lt;li&gt;行動が大事&lt;/li&gt;
&lt;li&gt;直感が正しくないときに確認する方法を持つ&lt;/li&gt;
&lt;li&gt;動くスコープを決める&lt;/li&gt;
&lt;li&gt;1週間で終わる目標&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;q&amp;amp;a&quot;&gt;Q&amp;amp;A&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Q. 毎週たくさん記事を紹介していて、週によってテーマがあるなと感じる時がある。そういうのはネタ帳に貯めているのか？&lt;/li&gt;
&lt;li&gt;A. あまり貯めてはいない。関連が思いついたら関連に追加するくらい。同時に似たようなものが流れることも多い。&lt;/li&gt;
&lt;li&gt;Q. 今週はテーマもストックもない、で困ることはある？&lt;/li&gt;
&lt;li&gt;A. あまりない&lt;/li&gt;
&lt;li&gt;Q. PDCAみたいなふりかえりはやってない？&lt;/li&gt;
&lt;li&gt;A. 特にやってない。なんとなく雰囲気でやっているくらい。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;ecma-402を知ってますか？---@makoto_kato&quot;&gt;ECMA-402を知ってますか？ - &lt;a href=&quot;https://twitter.com/makoto_kato&quot;&gt;@makoto_kato&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;https://docs.google.com/presentation/d/1N0waGxmspbLyRf6a6hG5oXk77z69YirgW21_Cegxnq0/edit#slide=id.p&quot;&gt;ECMA-402 - Google スライド&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;自己紹介

&lt;ul&gt;
&lt;li&gt;プラットフォームエンジニア&lt;/li&gt;
&lt;li&gt;Firefoxのバグとか、担当する&lt;/li&gt;
&lt;li&gt;日本語でOK&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ECMA-402?

&lt;ul&gt;
&lt;li&gt;ECMAScript Internationalization API&lt;/li&gt;
&lt;li&gt;Intl.DateTimeFormat&lt;/li&gt;
&lt;li&gt;Intl.NumberFormat&lt;/li&gt;
&lt;li&gt;Intl.Collator&lt;/li&gt;
&lt;li&gt;Number.prototype.toLocaleString&lt;/li&gt;
&lt;li&gt;String.prototype.localeCompare

&lt;ul&gt;
&lt;li&gt;文字列の比較は言語によって異なる&lt;/li&gt;
&lt;li&gt;accent記号での違い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;日本語の年号を表示する、などもできる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Editors for ECMA-402

&lt;ul&gt;
&lt;li&gt;1st, 2nd, 3rd で全て Editor が違う&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rwaldron&quot;&gt;https://github.com/rwaldron&lt;/a&gt; (TC39)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/caridy&quot;&gt;https://github.com/caridy&lt;/a&gt; (TC39)&lt;/li&gt;
&lt;li&gt;ブラウザベンダの人たちではない&lt;/li&gt;
&lt;li&gt;実はブラウザベンダのサポートが弱い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intl.DateTimeFormat

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Intl.DateTimeFormat(&amp;quot;en_US&amp;quot;, …)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Intl.DateTimeFormat(&amp;quot;zh-TW&amp;quot;, …)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Intl.DateTimeFormat(&amp;quot;ja-JP-u-ca-japanese&amp;quot;, …)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;→ &lt;code&gt;平成&lt;/code&gt; なども返ってくる&lt;/li&gt;
&lt;li&gt;→ 年号が変わったときもブラウザ側が実装してくれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intl.NumberFormat

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Intl.NumberFormat(&amp;quot;de&amp;quot;, …)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;→ &lt;code&gt;10.000,00€&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Intl.NumberFormat(&amp;quot;ja-JP&amp;quot;, …)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;\10,000&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;通過記号の位置など勝手にやってくれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intl.Collator

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Intl.Collator(&amp;#39;de&amp;#39;, …)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;対応状況

&lt;ul&gt;
&lt;li&gt;ほとんどのブラウザに入っている&lt;/li&gt;
&lt;li&gt;Safari 10も入ってるので大体のブラウザで使える&lt;/li&gt;
&lt;li&gt;Android Firefox（？）&lt;/li&gt;
&lt;li&gt;ファイルサイズが増える&lt;/li&gt;
&lt;li&gt;強硬に反対されている&lt;/li&gt;
&lt;li&gt;ICUライブラリ&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://site.icu-project.org/&quot;&gt;http://site.icu-project.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IBMが作成

&lt;ul&gt;
&lt;li&gt;去年に unicord.org 配下になった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;通貨、など全て各言語に対応&lt;/li&gt;
&lt;li&gt;Chakra, V8 などによって実装が少しぶれているところがある&lt;/li&gt;
&lt;li&gt;Chakra

&lt;ul&gt;
&lt;li&gt;Windows API&lt;/li&gt;
&lt;li&gt;今後、ICUを使っていくことになりそうとのこと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;V8

&lt;ul&gt;
&lt;li&gt;ICU&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ECMA-402 NEXT

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecma402&quot;&gt;https://github.com/tc39/ecma402&lt;/a&gt; にまとまっている&lt;/li&gt;
&lt;li&gt;次のバージョンに入れようというもの&lt;/li&gt;
&lt;li&gt;Zibi Braniecki

&lt;ul&gt;
&lt;li&gt;I20N の owner&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rafael Xavier&lt;/li&gt;
&lt;li&gt;Stage 4&lt;/li&gt;
&lt;li&gt;Intl.DateTimeFormat.prototype.formatToParts&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecma402/issues/30&quot;&gt;https://github.com/tc39/ecma402/issues/30&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;JSON 配列で返る&lt;/li&gt;
&lt;li&gt;V8とSpidermoneky&lt;/li&gt;
&lt;li&gt;ブラウザに入っている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stage 3&lt;/li&gt;
&lt;li&gt;Intl.NumberFormat.prototype.formatToParts

&lt;ul&gt;
&lt;li&gt;SpiderMonkey&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intl.PluralRules

&lt;ul&gt;
&lt;li&gt;SpiderMonkey&lt;/li&gt;
&lt;li&gt;複数形&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IntelPluralRules(&amp;quot;en-US&amp;quot;).select(1)&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;one&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IntelPluralRules(&amp;quot;en-US&amp;quot;).select(2)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;other&amp;quot;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;デモ中&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ICUで提供されている機能をJSに持ってこようという話がある&lt;/li&gt;
&lt;li&gt;多数の Issue が上がっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecma402/issues&quot;&gt;https://github.com/tc39/ecma402/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;q&amp;amp;a&quot;&gt;Q&amp;amp;A&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Q. ICU がファイルがでかくて入れるのに躊躇するとは、ブラウザ？OS？&lt;/li&gt;
&lt;li&gt;A. ブラウザ。Chrome / Firefox はOSバージョンに依存していないものは、ここが響く。古いOSだと依存バージョンが入っていないので、ブラウザ側にいれる必要がある&lt;/li&gt;
&lt;li&gt;Q. 今の仕様だと普通の人が使うには辛そうなインターフェイス。これは意図的にそうしているのか？そこまで考慮されていないだけなのか？&lt;/li&gt;
&lt;li&gt;A. そこまで考えられてないだけだと思われる。元々フレームワークとかアプリのレイヤーから少し離れてる人が書いていたため&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;2017年のjavascriptとフロントエンドの楽しみ方---@potato4d&quot;&gt;2017年のJavaScriptとフロントエンドの楽しみ方 - &lt;a href=&quot;https://twitter.com/potato4d&quot;&gt;@potato4d&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;https://speakerdeck.com/potato4d/2017nian-falsejavascriptto-hurontoendofalsele-simikata-number-jserinfo&quot;&gt;2017年のJavaScriptと フロントエンドの楽しみかた #jserinfo // Speaker Deck&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;自己紹介

&lt;ul&gt;
&lt;li&gt;春から東京&lt;/li&gt;
&lt;li&gt;Vue.js周りが中心&lt;/li&gt;
&lt;li&gt;Electonでツール作成&lt;/li&gt;
&lt;li&gt;漢は黙ってjQuery&lt;/li&gt;
&lt;li&gt;（正しさハラスメントの人？）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2016年のJSの変化

&lt;ul&gt;
&lt;li&gt;ES周り&lt;/li&gt;
&lt;li&gt;2015→2016

&lt;ul&gt;
&lt;li&gt;async/await 周りが盛り上がり&lt;/li&gt;
&lt;li&gt;SafariがES2015&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;パッケージ

&lt;ul&gt;
&lt;li&gt;npm / yarn&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フレームワーク

&lt;ul&gt;
&lt;li&gt;Angular2&lt;/li&gt;
&lt;li&gt;Vueシェア増加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SPA・モダンフレームワークを使うのが当たり前になった&lt;/li&gt;
&lt;li&gt;React / Angular のどちらかあるいは両方使える人が増えた&lt;/li&gt;
&lt;li&gt;珍しくなくなった&lt;/li&gt;
&lt;li&gt;2016年は浸透の1年&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;進化から浸透

&lt;ul&gt;
&lt;li&gt;その先は進出&lt;/li&gt;
&lt;li&gt;レイヤー間を越境する2017年&lt;/li&gt;
&lt;li&gt;JSといえばフロントエンドと言われるがそこだけではないはず&lt;/li&gt;
&lt;li&gt;バックエンドとしてのJS&lt;/li&gt;
&lt;li&gt;フロントエンドにおけるPWA… （追いつけず）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;バックエンドとしてのJS

&lt;ul&gt;
&lt;li&gt;Express + Serverless&lt;/li&gt;
&lt;li&gt;Serverless Framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://serverless.com/&quot;&gt;https://serverless.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;いい感じにサーバレスなバックエンドを構成できるフレームワーク

&lt;ul&gt;
&lt;li&gt;AWS Lambdaをよしなに使ってくれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Serverless への期待

&lt;ul&gt;
&lt;li&gt;サーバ管理の必要性の薄さ&lt;/li&gt;
&lt;li&gt;サーバサイドのコードは書きたいがインフラ管理までしたくない&lt;/li&gt;
&lt;li&gt;PaaS的な&lt;/li&gt;
&lt;li&gt;クラウド環境においてJSのみで記述できる&lt;/li&gt;
&lt;li&gt;ロマンを感じさせる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;新たに開拓されそうなレイヤ

&lt;ul&gt;
&lt;li&gt;PWAとハイブリッドアプリ&lt;/li&gt;
&lt;li&gt;PWA&lt;/li&gt;
&lt;li&gt;Progressive Web Apps

&lt;ul&gt;
&lt;li&gt;オフライン、ワーカー&lt;/li&gt;
&lt;li&gt;Webにアプリのようなリッチな体験を&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SPAは技術的観点が大きい、PWAはUXに関わる&lt;/li&gt;
&lt;li&gt;Web自体に増えるAPI&lt;/li&gt;
&lt;li&gt;PWAとAPIの組み合わせ

&lt;ul&gt;
&lt;li&gt;ベンダごとの差異&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;デスクトップ向けのオフライン周り

&lt;ul&gt;
&lt;li&gt;少し改善されつつあるが、まだまだ難しい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ハイブリッドアプリの再来の可能性&lt;/li&gt;
&lt;li&gt;Cordova方式から変わっていくトレンド&lt;/li&gt;
&lt;li&gt;「WebviewでHTMLが動くからすごい」からの脱却&lt;/li&gt;
&lt;li&gt;React Nativeなどネイティブ方面&lt;/li&gt;
&lt;li&gt;まとめ&lt;/li&gt;
&lt;li&gt;ハイブリッドアプリの勢力が強くなる可能性は大きくあると予想&lt;/li&gt;
&lt;li&gt;WeexをWatchしていきたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;余談

&lt;ul&gt;
&lt;li&gt;Web アセンブリ&lt;/li&gt;
&lt;li&gt;Python → Go の事例&lt;/li&gt;
&lt;li&gt;テクノロジの境界線が薄くなってきている&lt;/li&gt;
&lt;li&gt;好きな技術を好きな領域で使える未来

&lt;ul&gt;
&lt;li&gt;ex. サーバレス、Python を Go に&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;レイヤーの越境を楽しむのが良いのではないか？&lt;/li&gt;
&lt;li&gt;フロントエンドカンファレンス（3/18開催）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kfug.jp/frontconf2017/&quot;&gt;http://kfug.jp/frontconf2017/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;関西&lt;/li&gt;
&lt;li&gt;興味あれば是非！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;a-piece-of-potential-of-cognitive-services---@ovrmrw&quot;&gt;A piece of potential of Cognitive Services - &lt;a href=&quot;https://twitter.com/ovrmrw&quot;&gt;@ovrmrw&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;https://docs.google.com/presentation/d/1rwmyRW99N4ZAPM5gyDGjgv0yvJXVATUom6rNxAZrYvQ/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000#slide=id.g1aed898fe2_0_156&quot;&gt;A piece of potential of Cognitive Services - Google スライド&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Cognitive Service

&lt;ul&gt;
&lt;li&gt;Watson など機械学習サービスを使ってどのようなものができるのか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自己紹介

&lt;ul&gt;
&lt;li&gt;なんて事のないただの人w&lt;/li&gt;
&lt;li&gt;Angular Japan UG のスタッフ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GitHub repo

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ovrmrw/angular-realtime-translation-presentation&quot;&gt;https://github.com/ovrmrw/angular-realtime-translation-presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ovrmrw/cognitive-server-starter&quot;&gt;https://github.com/ovrmrw/cognitive-server-starter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今日はアプリの紹介をしていく

&lt;ul&gt;
&lt;li&gt;デモ&lt;/li&gt;
&lt;li&gt;英語で話すとニコ動的なコメントが英語＋日本語で流れる&lt;/li&gt;
&lt;li&gt;このアプリをどのように構成されているのかの話&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Angular (front-end)

&lt;ul&gt;
&lt;li&gt;ニコニコ動画風のコメント&lt;/li&gt;
&lt;li&gt;Angular animation apiで実装&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hapi (server-side)

&lt;ul&gt;
&lt;li&gt;Cognitive Serversとコネクションする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Watson

&lt;ul&gt;
&lt;li&gt;Speech to Text API&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/smarterplanet/jp/ja/ibmwatson/developercloud/speech-to-text.html&quot;&gt;http://www.ibm.com/smarterplanet/jp/ja/ibmwatson/developercloud/speech-to-text.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;音声データをテキストデータとしてリアルタイムで返ってくる&lt;/li&gt;
&lt;li&gt;スタート・ストップボタンを押してない&lt;/li&gt;
&lt;li&gt;リアルタイムレコーディング&lt;/li&gt;
&lt;li&gt;2つのマイクを使っている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Google Cloud Translator

&lt;ul&gt;
&lt;li&gt;Hapi 経由でこちらにも接続&lt;/li&gt;
&lt;li&gt;Watson で返ってきた英文を Cloud Translator に投げて翻訳&lt;/li&gt;
&lt;li&gt;Angularで翻訳前/翻訳語を Google Slide にオーバーレイ表示する&lt;/li&gt;
&lt;li&gt;少しディレイする&lt;/li&gt;
&lt;li&gt;日本語で話して英語に翻訳も&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サービスの値段について

&lt;ul&gt;
&lt;li&gt;Watson&lt;/li&gt;
&lt;li&gt;最初の1000分/月は無料

&lt;ul&gt;
&lt;li&gt;Googleは60分 / MS は 120分&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;超過分は $0.02/分&lt;/li&gt;
&lt;li&gt;発表時間20分 = 月の無料枠0.2%&lt;/li&gt;
&lt;li&gt;Google Cloud Translator&lt;/li&gt;
&lt;li&gt;100万文字毎に $20（無料枠はない）&lt;/li&gt;
&lt;li&gt;Microsoft Cognitive Serivices&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/cognitive-services/en-us/&quot;&gt;https://www.microsoft.com/cognitive-services/en-us/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;200万文字/月は無料

&lt;ul&gt;
&lt;li&gt;それ以上行くと打ち止め&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;なぜこれを作ったのか？

&lt;ul&gt;
&lt;li&gt;東京Node学園などで感じたことが元になっている&lt;/li&gt;
&lt;li&gt;両側の話&lt;/li&gt;
&lt;li&gt;登壇・通訳

&lt;ul&gt;
&lt;li&gt;リズムが良くない&lt;/li&gt;
&lt;li&gt;話したい事の半分くらいになってしまう&lt;/li&gt;
&lt;li&gt;自分でも半分くらいしかわからないことも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;日本人が日本語で発表

&lt;ul&gt;
&lt;li&gt;日本語ネイティブではない参加者にも分かるように&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;技術的には比較的簡単&lt;/li&gt;
&lt;li&gt;気づいたこと&lt;/li&gt;
&lt;li&gt;Google Slides は iframe にするといい

&lt;ul&gt;
&lt;li&gt;フルスクリーンだとオーバーレイ表示がうまくいかない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;q&amp;amp;a&quot;&gt;Q&amp;amp;A&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Q. 字を流している技術は？&lt;/li&gt;
&lt;li&gt;A. Angular Animation API を使っている。20秒かけて左9000pxに向けて流している。そこで止まる。よほど長い文字でなければ大丈夫。配列に追加している。20秒後には左に行ったものは消している。Fluxみたいなストアが動いていて、20秒経過したら削除。メモリにも優しい。&lt;/li&gt;
&lt;li&gt;Q. どれくらい英語の練習をしたのか？&lt;/li&gt;
&lt;li&gt;A. JSer.infoを普通に参加者で応募。抽選で落選。発表枠が空いてた。そこから。Watsonに合わせて自分の発音をチューニング。結構発音が厳しい。&lt;/li&gt;
&lt;li&gt;Q. 上に表示はWatson？&lt;/li&gt;
&lt;li&gt;A. グレーのは認識中のもの。0.5秒くらいでfinal、watsonが区切る。白い文字はWatson。緑色がGoogle 翻訳のもの&lt;/li&gt;
&lt;li&gt;Q. mic is active の部分は？&lt;/li&gt;
&lt;li&gt;A. watson へ送っているところ。これは自前で書いている。&lt;/li&gt;
&lt;li&gt; 右下のスライドURLを変えると、そのスライドで発表可能&lt;/li&gt;
&lt;li&gt;Q. 韓国語をサポートする予定は？&lt;/li&gt;
&lt;li&gt;A. Watson / Google翻訳は韓国語に対応しているので&lt;/li&gt;
&lt;li&gt;Q. アプリケーションは公開されている？&lt;/li&gt;
&lt;li&gt;A. GitHub にある（スライド中にURLがある・スライドは後ほど公開）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ovrmrw/angular-realtime-translation-presentation&quot;&gt;https://github.com/ovrmrw/angular-realtime-translation-presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ovrmrw/cognitive-server-starter&quot;&gt;https://github.com/ovrmrw/cognitive-server-starter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q. Hapi を使った理由は？&lt;/li&gt;
&lt;li&gt;A. Express がよくわからないから。Hapi に慣れているから。デモはサーバに上げずにローカルで動かしている。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;opalのすすめ---@youchan&quot;&gt;Opalのすすめ - &lt;a href=&quot;https://twitter.com/youchan&quot;&gt;@youchan&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;http://slides.youchan.org/JSerInfo6th&quot;&gt;JSerInfo6th&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;自己紹介

&lt;ul&gt;
&lt;li&gt;OpalのVirtualDOMなど作っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/youchan/hyalite&quot;&gt;https://github.com/youchan/hyalite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ruby方面から来ました

&lt;ul&gt;
&lt;li&gt;Q. サーバサイドを書いている・Rubyで書いている人&lt;/li&gt;
&lt;li&gt;A. そこそこいますね&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Opal アドベンドカレンダー

&lt;ul&gt;
&lt;li&gt;2016年書いてます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Opal とか

&lt;ul&gt;
&lt;li&gt;Ruby → JS のトランスパイラ&lt;/li&gt;
&lt;li&gt;Nodeなくても動く&lt;/li&gt;
&lt;li&gt;Rubyコアライブラリを同梱&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JSインテグレーション

&lt;ul&gt;
&lt;li&gt;バッククォートで囲むと JS として埋め込まれる&lt;/li&gt;
&lt;li&gt;ローカル変数はそのまま参照できる&lt;/li&gt;
&lt;li&gt;NativeモジュールでWrapperが書ける&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;なぜOpal

&lt;ul&gt;
&lt;li&gt;Rubyが大好きだから&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ruby の強力な機能

&lt;ul&gt;
&lt;li&gt;Classベースのオブジェクト指向&lt;/li&gt;
&lt;li&gt;組み込みライブラリ&lt;/li&gt;
&lt;li&gt;API豊富

&lt;ul&gt;
&lt;li&gt;外部ライブラリ入れなくてお&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メタプログラミング&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Classベースのオブジェクト指向

&lt;ul&gt;
&lt;li&gt;mix-in でprototypeベースのようにも使える&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include Enumerable&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;組み込みライブラリ

&lt;ul&gt;
&lt;li&gt;Array, Hash, Rangeは便利&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; で配列の結合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt; で配列の一部除外&lt;/li&gt;
&lt;li&gt;入れ子の配列を &lt;code&gt;.flatten&lt;/code&gt; でフラットに&lt;/li&gt;
&lt;li&gt;破壊的、非破壊的メソッドを &lt;code&gt;!&lt;/code&gt; で見分けられる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map!()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hash.merge()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;(1..3).to_a&lt;/code&gt;  , &lt;code&gt;(1…3).to_a&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;強力なメタプログラミングのサポート

&lt;ul&gt;
&lt;li&gt;オープンクラス、動的なメソッド定義&lt;/li&gt;
&lt;li&gt;ゴーストメソッド&lt;/li&gt;
&lt;li&gt;言語内DSL&lt;/li&gt;
&lt;li&gt;Rake: Makeの Ruby 版&lt;/li&gt;
&lt;li&gt;Vagrant, Chef, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;オープンクラス、動的なメソッド定義

&lt;ul&gt;
&lt;li&gt;クラスベースであってもJSのように動的なメソッド定義ができる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ゴーストメソッド

&lt;ul&gt;
&lt;li&gt;メソッドが見つからなかった時に発動&lt;/li&gt;
&lt;li&gt;動的なメソッド名で動かしたい時&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Opalを活かしたフレームワーク

&lt;ul&gt;
&lt;li&gt;Hyalite&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/youchan/hyalite&quot;&gt;https://github.com/youchan/hyalite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Menilite&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/youchan/menilite&quot;&gt;https://github.com/youchan/menilite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hyalite

&lt;ul&gt;
&lt;li&gt;発表スライドもこれで&lt;/li&gt;
&lt;li&gt;React を書いている人はわかりやすいのでは、とのこと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Isomorphoic Programming

&lt;ul&gt;
&lt;li&gt;Rubyでサーバサイド、ならばフロントもRubyで書けるといいよね&lt;/li&gt;
&lt;li&gt;そこでMenilite&lt;/li&gt;
&lt;li&gt;サーバサイドのモデルをクライアントからも使える&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if_server&lt;/code&gt; で分岐できる&lt;/li&gt;
&lt;li&gt;ActiveRecordインテグレーション&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まとめ

&lt;ul&gt;
&lt;li&gt;OpalはRuby→JSのトランスパイラ&lt;/li&gt;
&lt;li&gt;Rubyの強力な機能について説明&lt;/li&gt;
&lt;li&gt;Opalの日本語コミュニティ&lt;/li&gt;
&lt;li&gt;Slackにあるので参加してくれると嬉しい

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://opalrb-jp-slack.herokuapp.com/&quot;&gt;https://opalrb-jp-slack.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;how-amp-works-(ampについて)---@kishu&quot;&gt;HOW AMP WORKS (AMPについて) - @Kishu&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;自己紹介

&lt;ul&gt;
&lt;li&gt;Navarでフロントエンド担当&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AMP

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ampproject.org/&quot;&gt;Accelerated Mobile Pages Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ウェブページを早くレンダリングするための技術&lt;/li&gt;
&lt;li&gt;By Google&lt;/li&gt;
&lt;li&gt;パフォーマンス向上のために行って来た Google のノウハウが詰まっている&lt;/li&gt;
&lt;li&gt;Web ページ用の機能がそのまま使える&lt;/li&gt;
&lt;li&gt;HTML5, JS, CSS3, Cache&lt;/li&gt;
&lt;li&gt;Google の CDN にキャッシュされる&lt;/li&gt;
&lt;li&gt;AMP HTML&lt;/li&gt;
&lt;li&gt;拡張可能な HTML

&lt;ul&gt;
&lt;li&gt;拡張タグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;amp-carousel&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;amp.js&lt;/li&gt;
&lt;li&gt;ページで使うリソースのライフサイクル、レンダリング速度に関するライブラリ&lt;/li&gt;
&lt;li&gt;AMP では外部 JS が使えない

&lt;ul&gt;
&lt;li&gt;カスタムJSは sandbox の iframe で使える&lt;/li&gt;
&lt;li&gt;あるいは自分でカスタム amp component&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AMP STYLE = CSS&lt;/li&gt;
&lt;li&gt;外部のスタイル、インラインスタイルは許可しない&lt;/li&gt;
&lt;li&gt;最大50KB&lt;/li&gt;
&lt;li&gt;パターン&lt;/li&gt;
&lt;li&gt;HTML と AMP をペア&lt;/li&gt;
&lt;li&gt;スタンドアローン AMP&lt;/li&gt;
&lt;li&gt;まとめ&lt;/li&gt;
&lt;li&gt;AMPを使えば、Googleが高速レンダリングを保証&lt;/li&gt;
&lt;li&gt;ロードを感じさせない速度&lt;/li&gt;
&lt;li&gt;AMPを使えば、カリカリにチューニングしなくても速度が出せる&lt;/li&gt;
&lt;li&gt;AMPコンポーネント&lt;/li&gt;
&lt;li&gt;基本コンポーネントと拡張コンポーネント&lt;/li&gt;
&lt;li&gt;基本コンポーネントは、HTMLを代替しているイメージ&lt;/li&gt;
&lt;li&gt;拡張コンポーネント

&lt;ul&gt;
&lt;li&gt;JSを書かずにAMPタグのみで実装可能&lt;/li&gt;
&lt;li&gt;カルーセル&lt;/li&gt;
&lt;li&gt;ライトボックス&lt;/li&gt;
&lt;li&gt;サイドバー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bench-marking

&lt;ul&gt;
&lt;li&gt;Navar TVで試した&lt;/li&gt;
&lt;li&gt;イメージと動画が多いサイト&lt;/li&gt;
&lt;li&gt;ベンチマークIssue&lt;/li&gt;
&lt;li&gt;動画

&lt;ul&gt;
&lt;li&gt;動作する（https必須）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JS

&lt;ul&gt;
&lt;li&gt;カスタムJSは使えない&lt;/li&gt;
&lt;li&gt;“top”でスクロールなども使えず&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;AMP でのタイムライン&lt;/li&gt;
&lt;li&gt;1秒速くなった&lt;/li&gt;
&lt;li&gt;AMP でのネットワーク&lt;/li&gt;
&lt;li&gt;AMP 未適応

&lt;ul&gt;
&lt;li&gt;全てのリソース（48個）を一気にリクエスト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AMP 適応

&lt;ul&gt;
&lt;li&gt;最初に26個のリクエスト、他は順次読み込む&lt;/li&gt;
&lt;li&gt;表示されるものを先にリクエスト・ダウンロード&lt;/li&gt;
&lt;li&gt;スクロールして表示されそうになるときに遅延ロード&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;How AMP works?

&lt;ul&gt;
&lt;li&gt;非同期スクリプトのみ許可&lt;/li&gt;
&lt;li&gt;全てのリソースサイズを指定&lt;/li&gt;
&lt;li&gt;拡張コンポーネントをレンダリングを遮断せずに実行可能&lt;/li&gt;
&lt;li&gt;3rd Party JSをパースから除外(基本的に使えない)&lt;/li&gt;
&lt;li&gt;CSSは内部スタイルシートのみ許可&lt;/li&gt;
&lt;li&gt;Webフォントを効率的にダウンロード&lt;/li&gt;
&lt;li&gt;真っ先にダウンロード&lt;/li&gt;
&lt;li&gt;レイアウト性能が上がる&lt;/li&gt;
&lt;li&gt;スタイル再計算の最小化&lt;/li&gt;
&lt;li&gt;GPU加速アニメーションのみ表示&lt;/li&gt;
&lt;li&gt;リソースのロード順番を制御&lt;/li&gt;
&lt;li&gt;重要なリソースからダウンロード&lt;/li&gt;
&lt;li&gt;ページの即時ロード&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AMP Inside

&lt;ul&gt;
&lt;li&gt;カスタムエレメント&lt;/li&gt;
&lt;li&gt;&lt;code&gt;registerElement()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;AMP Component = HTML Custom Elements&lt;/li&gt;
&lt;li&gt;新しいHTMLタイプを定義してライフサイクルを制御&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/custom-elements/&quot;&gt;https://www.w3.org/TR/custom-elements/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;W3C標準の機能&lt;/li&gt;
&lt;li&gt;AMPライフサイクルはこれを拡張

&lt;ul&gt;
&lt;li&gt;ダウンロード、レンダリング視点の制御が可能になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;FSM (Finite-State Machine)&lt;/li&gt;
&lt;li&gt;条件により一つの状態を持つ&lt;/li&gt;
&lt;li&gt;条件が変わると別の状態に変わる&lt;/li&gt;
&lt;li&gt;状態が変わるとそれに伴うアクションを実行する&lt;/li&gt;
&lt;li&gt;doPass = discoverWork + work&lt;/li&gt;
&lt;li&gt;discoverWork&lt;/li&gt;
&lt;li&gt;AMPサイズ関連のパース&lt;/li&gt;
&lt;li&gt;レイアウトのJobスケジューリングなど&lt;/li&gt;
&lt;li&gt;work&lt;/li&gt;
&lt;li&gt;Jobの優先順位を計算、Jobを選択、レイアウト開始&lt;/li&gt;
&lt;li&gt;Single Pass Process&lt;/li&gt;
&lt;li&gt;優先順位が高いJobはそのまま作業、低いのは、キューに&lt;/li&gt;
&lt;li&gt;AMP Promise&lt;/li&gt;
&lt;li&gt;不要なイベントハンドルの処理を無くせる&lt;/li&gt;
&lt;li&gt;インターフェイスの統一ができる&lt;/li&gt;
&lt;li&gt;Optimization Reflow / Repaint&lt;/li&gt;
&lt;li&gt;Width / Height の変更があると該当のエレメントの再計算&lt;/li&gt;
&lt;li&gt;レンダーキューに入れて必要な時に一気に実行

&lt;ul&gt;
&lt;li&gt;最適化して高速化が可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.clientHeight&lt;/code&gt;  などで Reflow 発生&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.style.height = (h1 *2) + &amp;#39;px&amp;#39;&lt;/code&gt;  などで Job 発生&lt;/li&gt;
&lt;li&gt;Class Vsync&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutate()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;measure()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;runScheduledTasks()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;egjs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/naver/egjs&quot;&gt;https://github.com/naver/egjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Navar で公開しているUIコンポーネントライブラリ&lt;/li&gt;
&lt;li&gt;パフォーマンス重視&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;javascript-discussion&quot;&gt;JavaScript Discussion&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://app.sli.do/event/bkry5ojl/ask&quot;&gt;JSer.info 6周年 - JavaScript Discussion&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;テーマ: productionでのJS/CSSなどのcompile timeが長くて辛い(yarn + webpack)。毎回deployに5分ぐらいかかってる。何とかならないか?

&lt;ul&gt;
&lt;li&gt;アクビでもして待て&lt;/li&gt;
&lt;li&gt;Babelが遅いのは把握&lt;/li&gt;
&lt;li&gt;make で -j8 で分離して回避&lt;/li&gt;
&lt;li&gt;デプロイがどこからどこまでかはあるが、&lt;/li&gt;
&lt;li&gt;push して本番に出るまでが5分ならそこまで遅くないのでは？&lt;/li&gt;
&lt;li&gt;デプロイ時に瞬間にテストをする人が多い？&lt;/li&gt;
&lt;li&gt;push 時にテスト実行&lt;/li&gt;
&lt;li&gt;デプロイ時は本番サーバに出すだけ&lt;/li&gt;
&lt;li&gt;デプロイプロセスにビルドとテストが入っている人は？&lt;/li&gt;
&lt;li&gt;ビルドだけの人は？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Angular2は成功しそうですか?、どうやって予想していますか?

&lt;ul&gt;
&lt;li&gt;何を持っての成功か？&lt;/li&gt;
&lt;li&gt;Angular1より使われるか？

&lt;ul&gt;
&lt;li&gt;結構しんどい。 1 は相当使われている。超えるには相当時間がかかる。時間がかかるが成功はすると思う。&lt;/li&gt;
&lt;li&gt;Angular2とは言わないで、とコミュニティでは言っている&lt;/li&gt;
&lt;li&gt;Angularと呼んでほしい&lt;/li&gt;
&lt;li&gt;3 はスキップ、次は 4 になる&lt;/li&gt;
&lt;li&gt;「Angularのバージョン4を使っている」という表現にしてほしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: jQueryは辞めようみたいにいう声よく聞きますけど、ぶっちゃけまだまだ使ってますよね？

&lt;ul&gt;
&lt;li&gt;まだ使っている人は？&lt;/li&gt;
&lt;li&gt;会場の半分くらいはいる&lt;/li&gt;
&lt;li&gt;クライアントに指定されている&lt;/li&gt;
&lt;li&gt;「semantic-ui を使ってください」という指定

&lt;ul&gt;
&lt;li&gt;jQuery 依存&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bootstrap は 4 で jQuery 辞めるという話&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: azuさんのJS愛はどこからやってきたのですか？

&lt;ul&gt;
&lt;li&gt;趣味なので&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: ESModuleの最新情報を教えてください。

&lt;ul&gt;
&lt;li&gt;相変わらず進んでなさそう？&lt;/li&gt;
&lt;li&gt;Safari が ship した&lt;/li&gt;
&lt;li&gt;テックプレビューには出ている&lt;/li&gt;
&lt;li&gt;今のところバグは出てなさそう&lt;/li&gt;
&lt;li&gt;パフォーマンスは http2 などが必要になりそう&lt;/li&gt;
&lt;li&gt;ダイレクトインポート&lt;/li&gt;
&lt;li&gt;stage 3 なので入れてもいいのでは？ &lt;/li&gt;
&lt;li&gt;loader の仕様は？&lt;/li&gt;
&lt;li&gt;無視でw&lt;/li&gt;
&lt;li&gt;ブラウザ側の実装は進んでいる&lt;/li&gt;
&lt;li&gt;全ブラウザで進んでいる&lt;/li&gt;
&lt;li&gt;CORS のスペックが厳しい&lt;/li&gt;
&lt;li&gt;Node はまだ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: SSRのアプローチって率直に言って「正解」だと思いますか？

&lt;ul&gt;
&lt;li&gt;SSRをやっている人は？&lt;/li&gt;
&lt;li&gt;会場では数人？&lt;/li&gt;
&lt;li&gt;正解かはわからないが速い&lt;/li&gt;
&lt;li&gt;会場がこんなに少ないとは思わなかった&lt;/li&gt;
&lt;li&gt;正解だと思う。&lt;/li&gt;
&lt;li&gt;ユーザーメリットある&lt;/li&gt;
&lt;li&gt;体感速度が上がる&lt;/li&gt;
&lt;li&gt;問題点は実装が難しい

&lt;ul&gt;
&lt;li&gt;ライブラリで解決されるのでは？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;単純なサーバサイドレンダリングだと&lt;/li&gt;
&lt;li&gt;サーバがやることを最小&lt;/li&gt;
&lt;li&gt;初回レンダリングのみサーバサイド

&lt;ul&gt;
&lt;li&gt;フロントに寄せていくという意味だと良い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ファーストビューの見えるところだけサーバサイドレンダリング

&lt;ul&gt;
&lt;li&gt;これをやり始めるとサーバサイドの複雑性が増してしまうのでは？&lt;/li&gt;
&lt;li&gt;リクルートでの事例&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 韓国ではMarkup開発者とJavaScript開発者が分かれている場合が多いですが、日本はどうですか。

&lt;ul&gt;
&lt;li&gt;分業されている人は？&lt;/li&gt;
&lt;li&gt;会場ではあまりいない&lt;/li&gt;
&lt;li&gt;2013年の頃の会社だといた&lt;/li&gt;
&lt;li&gt;減っている気がする&lt;/li&gt;
&lt;li&gt;マークアップとは CSS ？&lt;/li&gt;
&lt;li&gt;かつてコーダーと呼ばれていた人？&lt;/li&gt;
&lt;li&gt;CSS と HTML をやっている人&lt;/li&gt;
&lt;li&gt;会場に来ているのはあまり分かれていない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Isomorphic programmingってどうですか?meteorとか流行ってるんでしょうか?

&lt;ul&gt;
&lt;li&gt;あまり言わなくなった？&lt;/li&gt;
&lt;li&gt;名前は変わっているが、やろうとしていることは変わっていない&lt;/li&gt;
&lt;li&gt;meteor はダメだったのでは？&lt;/li&gt;
&lt;li&gt;Vue.js の作者が Meteor にいたけど、独立したとか&lt;/li&gt;
&lt;li&gt;Meteor 詳しい人は？&lt;/li&gt;
&lt;li&gt;会場にはいなかった&lt;/li&gt;
&lt;li&gt;Node Core が URL を入れてくれたのが良かった&lt;/li&gt;
&lt;li&gt;Node 標準が頑張ってくれるといいのにな&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: コンパイルして、デプロイして公開の流れはどうされていますか？サーバサイドとの共存や使っているツール、サービスなど

&lt;ul&gt;
&lt;li&gt;GitHub に push → ビルドとテスト&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;デプロイ時は tar ball

&lt;ul&gt;
&lt;li&gt;deploy は 30sec くらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Jenkins でコンパイルの生成物をどこかに入れる&lt;/li&gt;
&lt;li&gt;Circle CI + S3 でやっている人はいますか？

&lt;ul&gt;
&lt;li&gt;Travis でやってる。生成物は S3 へアップ&lt;/li&gt;
&lt;li&gt;特殊な URL 経由で、JS だけ S3 にアップされたものを読み込むという仕込み&lt;/li&gt;
&lt;li&gt;それで本番サーバで確認する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Aurelia は最近どうなのでしょうか？

&lt;ul&gt;
&lt;li&gt;元 Angular の人、いまは MS へ&lt;/li&gt;
&lt;li&gt;最近どうかの知識はない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Promiseのcancelがキャンセルされた経緯

&lt;ul&gt;
&lt;li&gt;正確な経緯は外に出ていない&lt;/li&gt;
&lt;li&gt;それしか解決できない API がイマイチだ、など&lt;/li&gt;
&lt;li&gt;社内政治の結果？&lt;/li&gt;
&lt;li&gt;Dominic「もう疲れたよ」&lt;/li&gt;
&lt;li&gt;Fetch のキャンセルをどうするか？という話に戻った&lt;/li&gt;
&lt;li&gt;1/23 にミーティングがある&lt;/li&gt;
&lt;li&gt;その結果何かが変わるかも&lt;/li&gt;
&lt;li&gt;呟いとくので興味があれば参加してみては&lt;/li&gt;
&lt;li&gt;属人性問題？&lt;/li&gt;
&lt;li&gt;特定の人に依存しちゃっている？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 2017年で起るであろう、Webトレンド教えてください

&lt;ul&gt;
&lt;li&gt;ありません！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 社内でJSerを増やすためにはどうすればよいでしょうか？ （他言語をメインでやっている人は、JS界隈のトレンド変化が早く、「僕は消耗したくない！5年後10年後ならやってもいいよ！」と言われます）

&lt;ul&gt;
&lt;li&gt;かつてやっていたこと&lt;/li&gt;
&lt;li&gt;JS 書く人を募集&lt;/li&gt;
&lt;li&gt;採用するしかないんじゃないかな&lt;/li&gt;
&lt;li&gt;書きたい人は書いているのでは？&lt;/li&gt;
&lt;li&gt;雇用を増やしましょう&lt;/li&gt;
&lt;li&gt;会社でフロントエンドウイークリーランチ&lt;/li&gt;
&lt;li&gt;興味ある人たちで読む

&lt;ul&gt;
&lt;li&gt;「興味ある人」に絞り込まれている問題はある&lt;/li&gt;
&lt;li&gt;フロントエンドを触るけど&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マンスリー版もやりたいな、と思っている&lt;/li&gt;
&lt;li&gt;単発・期間限定で企画をすることがある&lt;/li&gt;
&lt;li&gt;JS に触れてない人を巻き込むという方法&lt;/li&gt;
&lt;li&gt;「3年間毎日 JS の人が欲しい」と言い続けた結果、来なかったのでやめた&lt;/li&gt;
&lt;li&gt;JSer.infoを毎週読むという活動をしている&lt;/li&gt;
&lt;li&gt;ちょこちょこ参加者は増えた&lt;/li&gt;
&lt;li&gt;雑な情報を吹き込むくらいはできている&lt;/li&gt;
&lt;li&gt;お金と継続的な活動をしましょう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: フレームワークを選択する時主にどんな部分を重要に思いますか。

&lt;ul&gt;
&lt;li&gt;ライブラリのバージョンが枯れているかは重要ではなかった&lt;/li&gt;
&lt;li&gt;解決したいモチベーションが何なのか？&lt;/li&gt;
&lt;li&gt;何を解決したいかのメリットが自分たちとあっているか？&lt;/li&gt;
&lt;li&gt;ユーザーベース、パトロン系が大きいところを考慮

&lt;ul&gt;
&lt;li&gt;ex. VirtualDOM なら React (Facebook)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人数少ない・バイトがいる・人員が限られている例&lt;/li&gt;
&lt;li&gt;協業ベースができる技術を選択

&lt;ul&gt;
&lt;li&gt;デザイナーだけどコードかける人&lt;/li&gt;
&lt;li&gt;関わる人数がどれだけ増やせるか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;学習コストをかけていられない

&lt;ul&gt;
&lt;li&gt;軽ければ軽いほどいい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Backbone から React へ移行時の例&lt;/li&gt;
&lt;li&gt;部分的に置き換えていけるか？を考慮&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: SPA してる人って OGP とかどうしてるんですか

&lt;ul&gt;
&lt;li&gt;OGP = Facebook のヘッダ情報&lt;/li&gt;
&lt;li&gt;blog の例&lt;/li&gt;
&lt;li&gt;Angular で blog&lt;/li&gt;
&lt;li&gt;Facebook, Twitter でキレイに表示されるために&lt;/li&gt;
&lt;li&gt;SSR を組むのは面倒くさかった&lt;/li&gt;
&lt;li&gt;prerender.io というサービスを使った

&lt;ul&gt;
&lt;li&gt;ミドルウェアは OSS &lt;/li&gt;
&lt;li&gt;キャッシュサーバは無料もしくは有料&lt;/li&gt;
&lt;li&gt;HTML を phantom-js でレンダリング&lt;/li&gt;
&lt;li&gt;それをキャッシュ&lt;/li&gt;
&lt;li&gt;キャッシュをクロールに読ませる&lt;/li&gt;
&lt;li&gt;そのようにサーバ設定をする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;レンダリングしたものを返すのが定説っぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: React Storybook って使っている人ますか？ぶっちゃけどうですか？

&lt;ul&gt;
&lt;li&gt;React Storybook = スタイルガイドのようなもの&lt;/li&gt;
&lt;li&gt;コンポーネントをビルドして使っていた&lt;/li&gt;
&lt;li&gt;それが面倒だった&lt;/li&gt;
&lt;li&gt;Storybook を使うとコンポーネントだけ実装していけば良い（ちと聞き取れず、不明）&lt;/li&gt;
&lt;li&gt;残念だったこと

&lt;ul&gt;
&lt;li&gt;コミュニケーションコストを下げたかったが、うまくいかなかった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Abema TV は使っていた？&lt;/li&gt;
&lt;li&gt;パラメータはみれて、プレビューは便利&lt;/li&gt;
&lt;li&gt;どれだけ頑張るか、による&lt;/li&gt;
&lt;li&gt;協業時のスタイルガイドとして使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Yarnをproductionで使ってますか?

&lt;ul&gt;
&lt;li&gt;使っている人？&lt;/li&gt;
&lt;li&gt;4人くらい&lt;/li&gt;
&lt;li&gt;npm シュリンクラップ使っている人？&lt;/li&gt;
&lt;li&gt;ちょいちょい？&lt;/li&gt;
&lt;li&gt;npm 5 でちゃんと治すところあり&lt;/li&gt;
&lt;li&gt;npm4 だとまだ不十分？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: create-react-appで自分のHP作ったんですが、GooglePageSpeedでチェックしたところ結構点数低いです。 これどうにかして点数上げられないですか？モバイル66点、パソコンが85点です。ちなみにGithubでホストしています。

&lt;ul&gt;
&lt;li&gt;開発途中？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Webpackから開放されるときは来ますか？ES modulesが主要ブラウザ・Node.jsでサポートされたとき？

&lt;ul&gt;
&lt;li&gt;使っている人？&lt;/li&gt;
&lt;li&gt;3-4割&lt;/li&gt;
&lt;li&gt;browserify を使っている人?

&lt;ul&gt;
&lt;li&gt;1-2割&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;loader だけじゃないことを Webpack でやっている&lt;/li&gt;
&lt;li&gt;だから解放されない&lt;/li&gt;
&lt;li&gt;Webpack で .js 以外の処理をしている人は？&lt;/li&gt;
&lt;li&gt;会場 1-2 割くらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: SPAはこの先当分の間続くと思いますか？

&lt;ul&gt;
&lt;li&gt;そちらにメリットがあるなら続くのでは？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: PWA流行ってなくないですか？

&lt;ul&gt;
&lt;li&gt;そちらにメリットがあるなら続くのでは？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: wasm が普及して JS が置き換えられる未来は来るのか、ということを皆さんどう思ってるのか気になります

&lt;ul&gt;
&lt;li&gt;JS には複雑・簡単なアプリの両翼がある&lt;/li&gt;
&lt;li&gt;簡単な、では JS が残る&lt;/li&gt;
&lt;li&gt;複雑な、だと、、ゲームでどうなるかによる

&lt;ul&gt;
&lt;li&gt;1年で解決する問題ではなさそう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;wasm で書くのは10年後とかになるのでは？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 海外のJSコミュニティと関わるにはどうすればよいでしょうか

&lt;ul&gt;
&lt;li&gt;commit する、とか&lt;/li&gt;
&lt;li&gt;開発者の代わりに返答してあげる、とか&lt;/li&gt;
&lt;li&gt;海外のカンファレンスへ行ったことある人は？&lt;/li&gt;
&lt;li&gt;JS の例ではなかったが、思い切ってエイヤで行けば関われるのでは？&lt;/li&gt;
&lt;li&gt;韓国での話は？&lt;/li&gt;
&lt;li&gt;コントリビュートしようと思っているが、うまく行ってない&lt;/li&gt;
&lt;li&gt;サムソン

&lt;ul&gt;
&lt;li&gt;jQueryのコントリビューターを採用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Navar

&lt;ul&gt;
&lt;li&gt;webkit のフルタイムコミッタを採用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;会社や周りの環境も大事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: プロジェクト横断のUIコンポーネント、Reactで組んじゃっていいのかな？いまWeb Componentsで組むのも。。

&lt;ul&gt;
&lt;li&gt;Rollup （？）の作者が同じようなことを言っている&lt;/li&gt;
&lt;li&gt;Onsen JS (Onsen UI ?) の仕組みが参考になるかも&lt;/li&gt;
&lt;li&gt;React / Angular の特定技術にフォーカスした人は？&lt;/li&gt;
&lt;li&gt;Firefox のカスタムエレメンツ&lt;/li&gt;
&lt;li&gt;v1 で止まっている？&lt;/li&gt;
&lt;li&gt;Shadow DOM

&lt;ul&gt;
&lt;li&gt;プライオリティは高くない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;1社しか実装しないものは微妙&lt;/li&gt;
&lt;li&gt;Webkit がちゃんとした後で動くのでは？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 最近のフロントエンドがとまってみえるひとの数 ?

&lt;ul&gt;
&lt;li&gt;いない？&lt;/li&gt;
&lt;li&gt;&lt;img class=&#39;emoji&#39; title=&#39;:sushi:&#39; alt=&#39;:sushi:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f363.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; が止まって見える？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Proxy APIきてほしい

&lt;ul&gt;
&lt;li&gt;来なかった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: HTML ImportsはMozillaではどうなりました？

&lt;ul&gt;
&lt;li&gt;なかったことで。。。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: serversideをnode.js(tsも可)で書いている人ってどれくらいいるのでしょうか？

&lt;ul&gt;
&lt;li&gt;書いている人？&lt;/li&gt;
&lt;li&gt;5人くらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 次のフレームワークプロレスはいつ起こると思いますか？

&lt;ul&gt;
&lt;li&gt;テーマ: react native や native script をガッツリ触ってる人はいますか？&lt;/li&gt;
&lt;li&gt;使っている人？&lt;/li&gt;
&lt;li&gt;React Native をプロダクション投入&lt;/li&gt;
&lt;li&gt;React Native ミートアップあるよ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 自社で管理しているWebサイトのリニューアルがあり、 これを機にES6を導入したいと思っています。 トランスパイラはTypeScriptとBabelが候補で個人的には型を厳格に取り扱えるTSが良いと思っています。メリデメと他の候補があれば教えてほしいです。

&lt;ul&gt;
&lt;li&gt;比較にならないのでは？&lt;/li&gt;
&lt;li&gt;好きな方を使えば良いのでは？&lt;/li&gt;
&lt;li&gt;Babelを使うことがどういうことか&lt;/li&gt;
&lt;li&gt;ES6で書ける&lt;/li&gt;
&lt;li&gt;Flow を使っている人？&lt;/li&gt;
&lt;li&gt;TypeScript ではなくこちらを選んだ理由&lt;/li&gt;
&lt;li&gt;React を使っていた

&lt;ul&gt;
&lt;li&gt;他者が使ってて良さそうと思ったから&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ES5 → ES6&lt;/li&gt;
&lt;li&gt;Flow がまだ実装進んでなかった&lt;/li&gt;
&lt;li&gt;TypeScript のほうが進んでいた

&lt;ul&gt;
&lt;li&gt;IDE サポートも進んでいた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;型ありから型ありに移行するなら、まぁいいかという印象

&lt;ul&gt;
&lt;li&gt;型なしからの乗り換えよりははるかにマシ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Sun, 15 Jan 2017 20:36:00 +0900</pubDate>
        <link>https://jser.info/2017/01/15/jser-info-6years/</link>
        <guid isPermaLink="true">https://jser.info/2017/01/15/jser-info-6years/</guid>
        
        <category>イベント</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>雑記</category>
        
      </item>
    
      <item>
        <title>2017-01-11のJS: Node.js v7.4.0とnpm v4、PhantomJS 2.5.0 Beta、クリーンコード</title>
        <description>&lt;p&gt;JSer.info #313 - &lt;a href=&quot;https://nodejs.org/en/blog/release/v7.4.0/&quot; title=&quot;Node v7.4.0&quot;&gt;Node v7.4.0&lt;/a&gt;がリリースされました。&lt;br&gt;
BufferやEventEmitterのパフォーマンス改善が含まれています。&lt;br&gt;
また、Node.js v7.4.0では、npm &lt;a href=&quot;https://github.com/npm/npm/releases/tag/v4.0.5&quot; title=&quot;v4.0.5&quot;&gt;v4.0.5&lt;/a&gt;が同梱されるようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/npm/npm/blob/v4.0.5/CHANGELOG.md&quot; title=&quot;npm/CHANGELOG.md at v4.0.5 · npm/npm&quot;&gt;npm/CHANGELOG.md at v4.0.5 · npm/npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;npm v4では、&lt;code&gt;prepublish&lt;/code&gt;のライフサイクルが&lt;code&gt;prepublishOnly&lt;/code&gt;と&lt;code&gt;prepare&lt;/code&gt;に分割されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://iamakulov.com/notes/all/npm-4-prepublish/&quot; title=&quot;npm 4 is splitting the “prepublish” script into “prepublishOnly” and “prepare”&quot;&gt;npm 4 is splitting the “prepublish” script into “prepublishOnly” and “prepare”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、&lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;にデフォルトで&lt;code&gt;devDependencies&lt;/code&gt;が含まれるようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/shinout/items/97e4ae21800bbc98f2c0&quot; title=&quot;npm shrinkwrapを運用で使うためのコツ - Qiita&quot;&gt;npm shrinkwrapを運用で使うためのコツ - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;npm v3以下のshrinkwrapの挙動について書かれている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他にも非推奨のコマンドを削除したり、挙動が変更/改善されている部分があります。&lt;br&gt;
詳しくはCHANGELOGを参照してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/npm/npm/blob/v4.0.5/CHANGELOG.md&quot; title=&quot;npm/CHANGELOG.md at v4.0.5 · npm/npm&quot;&gt;npm/CHANGELOG.md at v4.0.5 · npm/npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.info/2016/10/24/npm-4.0.0-node.js-v6.9.0-lts-webpack2/&quot; title=&quot;2016-10-24のJS: npm 4.0.0、Node.js v6.9.0 (LTS)、webpack@2へのマイグレーション - JSer.info&quot;&gt;2016-10-24のJS: npm 4.0.0、Node.js v6.9.0 (LTS)、webpack@2へのマイグレーション - JSer.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.risingstack.com/yarn-vs-npm-node-js-package-managers/&quot; title=&quot;Yarn vs npm - The State of Node.js Package Managers | @RisingStack&quot;&gt;Yarn vs npm - The State of Node.js Package Managers | @RisingStack&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;npm v4の変更についても書かれている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;ヘッドレスブラウザの&lt;a href=&quot;https://groups.google.com/forum/#!topic/phantomjs/AefOuwkgBh0&quot; title=&quot;PhantomJS 2.5.0 Beta&quot;&gt;PhantomJS 2.5.0 Beta&lt;/a&gt;がリリースされました。&lt;/p&gt;

&lt;p&gt;依存するQTWebKitがアップデートされたことにより、ES2015の機能がサポートされています。&lt;br&gt;
QTWebKitについての変更は次を参照してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/annulen/webkit/wiki/Comparison-with-QtWebKit-5.6&quot; title=&quot;Comparison with QtWebKit 5.6 · annulen/webkit Wiki&quot;&gt;Comparison with QtWebKit 5.6 · annulen/webkit Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript&quot; title=&quot;ryanmcdermott/clean-code-javascript: Clean Code concepts adapted for JavaScript&quot;&gt;ryanmcdermott/clean-code-javascript&lt;/a&gt;では、&lt;a href=&quot;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot; title=&quot;Clean Code&quot;&gt;Clean Code&lt;/a&gt;(&lt;a href=&quot;https://www.amazon.co.jp/dp/4048676881&quot;&gt;日本語&lt;/a&gt;)の内容をベースにしたガイドラインが書かれています。&lt;/p&gt;

&lt;p&gt;読みやすい、再利用しやすい、リファクタリングしやすいコードについてES2015のコードをベースにサンプルが書かれています。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;お知らせ&quot;&gt;お知らせ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jser.connpass.com/event/46997/&quot; title=&quot;JSer.info 6周年と300回記念イベント&quot;&gt;JSer.info 6周年と300回記念イベント&lt;/a&gt;は、今週末の2017/01/15(日) に開催されます。(開場は13:30から)&lt;/p&gt;

&lt;p&gt;既に会場の入場に必要な入館IDはconnpassのメッセージ経由でメールが来ていると思うので、ご確認をよろしくお願いします。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;introducing-inferno-1.0-–-inferno_js-–-medium&quot;&gt;Introducing Inferno 1.0 – inferno_js – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/inferno-js/introducing-inferno-1-0-f3da5c4e773b&quot; title=&quot;Introducing Inferno 1.0 – inferno\_js – Medium&quot;&gt;medium.com/inferno-js/introducing-inferno-1-0-f3da5c4e773b&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;DOM&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Inferno 1.0リリース。&lt;br&gt;
Infernoがなぜ作られたのか、今後のロードマップについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;node-v7.4.0-(current)-|-node.js&quot;&gt;Node v7.4.0 (Current) | Node.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/blog/release/v7.4.0/&quot; title=&quot;Node v7.4.0 (Current) | Node.js&quot;&gt;nodejs.org/en/blog/release/v7.4.0/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.js 7.4.0リリース。&lt;br&gt;
Buffer、&lt;code&gt;EventEmitter.once&lt;/code&gt;のパフォーマンス改善など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;[release]-phantomjs-2.5.0-beta---google-グループ&quot;&gt;[Release] PhantomJS 2.5.0 Beta - Google グループ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/phantomjs/AefOuwkgBh0&quot; title=&quot;\[Release\] PhantomJS 2.5.0 Beta - Google グループ&quot;&gt;groups.google.com/d/topic/phantomjs/AefOuwkgBh0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;webkit&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;PhantomJS 2.5.0βリリース。&lt;br&gt;
QtWebKitがアップデートされES2015のサポート、WebPのサポートなど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/annulen/webkit/wiki/Comparison-with-QtWebKit-5.6&quot; title=&quot;Comparison with QtWebKit 5.6 · annulen/webkit Wiki&quot;&gt;Comparison with QtWebKit 5.6 · annulen/webkit Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;microsoft-edge-build-15002-changelog---microsoft-edge-development&quot;&gt;Microsoft Edge build 15002 changelog - Microsoft Edge Development&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/changelog/desktop/15002/&quot; title=&quot;Microsoft Edge build 15002 changelog - Microsoft Edge Development&quot;&gt;developer.microsoft.com/en-us/microsoft-edge/platform/changelog/desktop/15002/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;MSEdge&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Windows 10 build 15002リリース。&lt;br&gt;
MSEdgeでFlashがClick to playに、Web Paymentsの試験的サポート、CSP 2.0、WebVR APIのサポートなど&lt;br&gt;
また別オリジンにおけるsetTimeout/requestAnimationFrameの呼び出し頻度を抑制するなど&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;es6-arrow-functions-in-depth&quot;&gt;ES6 arrow functions in depth&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://codesi.nz/es6-arrow-functions-in-depth/&quot; title=&quot;ES6 arrow functions in depth&quot;&gt;codesi.nz/es6-arrow-functions-in-depth/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Arrow Functionについて細かいところも含めて、解説してる記事。&lt;br&gt;
よくある&lt;code&gt;this&lt;/code&gt;の動き、暗黙的な&lt;code&gt;return&lt;/code&gt;について&lt;br&gt;
また、&lt;code&gt;new&lt;/code&gt;できない点、&lt;code&gt;new.target&lt;/code&gt;や&lt;code&gt;arguements&lt;/code&gt;を扱えない点についてなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;from-sass-to-postcss-by-tyler-gaw&quot;&gt;From Sass to PostCSS by Tyler Gaw&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://tylergaw.com/articles/sass-to-postcss&quot; title=&quot;From Sass to PostCSS by Tyler Gaw&quot;&gt;tylergaw.com/articles/sass-to-postcss&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Sass&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;PostCSS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SassだったものをPostCSSに置き換えるまでの話。&lt;br&gt;
Sassの構文とPostCSS拡張(cssnext)の比較&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;es-proposal:-import()&quot;&gt;ES proposal: import()&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.2ality.com/2017/01/import-operator.html&quot; title=&quot;ES proposal: import()&quot;&gt;www.2ality.com/2017/01/import-operator.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;proposal&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;現在Stage 3のProposalである、&lt;code&gt;import()&lt;/code&gt;について。&lt;br&gt;
dynamic module importsに関する仕様&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;yarn-vs-npm---the-state-of-node.js-package-managers-|-@risingstack&quot;&gt;Yarn vs npm - The State of Node.js Package Managers | @RisingStack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.risingstack.com/yarn-vs-npm-node-js-package-managers/&quot; title=&quot;Yarn vs npm - The State of Node.js Package Managers | @RisingStack&quot;&gt;blog.risingstack.com/yarn-vs-npm-node-js-package-managers/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;yarn&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;npm v4とYarnについて。&lt;br&gt;
npm v4で追加された機能の解説、Yarnの機能やロックファイルについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;web-animation-in-2017-|-nothing-new&quot;&gt;Web animation in 2017 | Nothing new&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://birtles.wordpress.com/2017/01/10/web-animation-in-2017/&quot; title=&quot;Web animation in 2017 | Nothing new&quot;&gt;birtles.wordpress.com/2017/01/10/web-animation-in-2017/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;animation&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;firefox&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Web Animation関連の仕様ステータスについてのまとめ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;building-a-custom-tag-input-with-skate.js&quot;&gt;Building a custom tag input with Skate.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/building-a-custom-tag-input-with-skate-js-fbd4cdf744f&quot; title=&quot;Building a custom tag input with Skate.js&quot;&gt;hackernoon.com/building-a-custom-tag-input-with-skate-js-fbd4cdf744f&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;WebComponents&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Web ComponentsフレームワークであるSkate.jsを使ってタグ入力コンポーネントを作る話。&lt;br&gt;
値、スタイルの定義の仕方などについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;flux-を使わずに-react-コンポーネント間のコミュニケーションを行う8つの方法---qiita&quot;&gt;Flux を使わずに React コンポーネント間のコミュニケーションを行う8つの方法 - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/kyoshidajp/items/0ddb156d96bb6337f623&quot; title=&quot;Flux を使わずに React コンポーネント間のコミュニケーションを行う8つの方法 - Qiita&quot;&gt;qiita.com/kyoshidajp/items/0ddb156d96bb6337f623&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;翻訳&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Reactコンポーネント同士で値の受け渡しなどのパターンについて&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;サイト、サービス、ドキュメント&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;ryanmcdermott/clean-code-javascript:-clean-code-concepts-adapted-for-javascript&quot;&gt;ryanmcdermott/clean-code-javascript: Clean Code concepts adapted for JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript&quot; title=&quot;ryanmcdermott/clean-code-javascript: Clean Code concepts adapted for JavaScript&quot;&gt;github.com/ryanmcdermott/clean-code-javascript&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;OOP&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;クリーンコードをJavaScriptで行うガイドライン。&lt;br&gt;
読みやすいコードの書き方やオブジェクト指向プログラミング、SOLID、ES2015以降の機能使って分かりやすく書く話など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;縦書きweb普及委員会&quot;&gt;縦書きWeb普及委員会&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tategaki.github.io/&quot; title=&quot;縦書きWeb普及委員会&quot;&gt;tategaki.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;縦書きCSSについての解説サイト&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;flow-runtime&quot;&gt;Flow Runtime&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://codemix.github.io/flow-runtime/&quot; title=&quot;Flow Runtime&quot;&gt;codemix.github.io/flow-runtime/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;flowtype&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;babel&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Flow互換の型チェックを実装したランタイムとBabelプラグイン。&lt;br&gt;
Flowで書いたコードをランタイムチェックすることができる&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;talyssonoc/structure:-a-simple-schema/attributes-library-built-on-top-of-modern-javascript&quot;&gt;talyssonoc/structure: A simple schema/attributes library built on top of modern JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/talyssonoc/structure&quot; title=&quot;talyssonoc/structure: A simple schema/attributes library built on top of modern JavaScript&quot;&gt;github.com/talyssonoc/structure&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ES2015 classesのモデルに対してスキーマを定義できるライブラリ。&lt;br&gt;
スキーマを元にバリデーションやシリアライズを行える&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;wheresrhys/fetch-mock:-mock-http-requests-made-using-fetch-(or-isomorphic-fetch)&quot;&gt;wheresrhys/fetch-mock: Mock http requests made using fetch (or isomorphic-fetch)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wheresrhys/fetch-mock&quot; title=&quot;wheresrhys/fetch-mock: Mock http requests made using fetch (or isomorphic-fetch)&quot;&gt;github.com/wheresrhys/fetch-mock&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Fetch&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;HTTP&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Fetch APIのモックライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;danculley/real-dom:-a-~1k-non-virtual-dom-non-framework-framework-for-simple-apps&quot;&gt;danculley/real-dom: A ~1K non-virtual DOM non-framework framework for simple apps&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/danculley/real-dom&quot; title=&quot;danculley/real-dom: A ~1K non-virtual DOM non-framework framework for simple apps&quot;&gt;github.com/danculley/real-dom&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;jsx&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JSXで書くこともでき、ReduxライクなStateマシンを扱えるDOMコンポーネントライブラリ。&lt;br&gt;
50行ほどのコードで実装されていてとても小さい。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;xvg&quot;&gt;xvg&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://xvg.now.sh/&quot; title=&quot;xvg&quot;&gt;xvg.now.sh/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;SVG&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Chrome&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;debug&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SVG pathをアウトライン化、アンカーを表示することでSVGをデバッグすることができるChrome拡張&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;nodekit&quot;&gt;NodeKit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nodekit.io/&quot; title=&quot;NodeKit&quot;&gt;nodekit.io/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;webkit&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Electron&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsをiOS/Android/Windowsなどのアプリで組み込んで使うようのフレームワーク。&lt;br&gt;
JavaScriptのバインディングにJavaScriptCoreやChackraCoreを使う&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;jlongster/prettier:-prettier-is-an-opinionated-javascript-formatter.&quot;&gt;jlongster/prettier: Prettier is an opinionated JavaScript formatter.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jlongster/prettier&quot; title=&quot;jlongster/prettier: Prettier is an opinionated JavaScript formatter.&quot;&gt;github.com/jlongster/prettier&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;折り返し桁数ベースのJavaScript整形ツール&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jlongster.com/A-Prettier-Formatter&quot; title=&quot;A Prettier JavaScript Formatter&quot;&gt;A Prettier JavaScript Formatter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;書籍関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;o&amp;#x27;reilly-japan---初めてのjavascript-第3版&quot;&gt;O&amp;#x27;Reilly Japan - 初めてのJavaScript 第3版&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.oreilly.co.jp/books/9784873117836/&quot; title=&quot;O&amp;#39;Reilly Japan - 初めてのJavaScript 第3版&quot;&gt;www.oreilly.co.jp/books/9784873117836/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;book&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2017年1月20日発売&lt;br&gt;
Learning JavaScriptの翻訳本。&lt;br&gt;
ES2015+に対応した内容&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.marlin-arms.com/support/ljs3/&quot; title=&quot;初めてのJavaScript 第3版 サポートページ — マーリンアームズ&quot;&gt;初めてのJavaScript 第3版 サポートページ — マーリンアームズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;front-end-handbook-2017-·-gitbook&quot;&gt;Front-end Handbook 2017 · GitBook&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details&quot; title=&quot;Front-end Handbook 2017 · GitBook&quot;&gt;www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;book&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;フロントエンドに関する電子書籍の2017年版&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/frontendmasters/front-end-handbook/details&quot; title=&quot;Front-end Handbook 2016 · GitBook&quot;&gt;Front-end Handbook 2016 · GitBook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Wed, 11 Jan 2017 09:36:00 +0900</pubDate>
        <link>https://jser.info/2017/01/11/Node.js-v7.4.0-npm-v4-PhantomJS-2.5.0-Beta-clean-code/</link>
        <guid isPermaLink="true">https://jser.info/2017/01/11/Node.js-v7.4.0-npm-v4-PhantomJS-2.5.0-Beta-clean-code/</guid>
        
        <category>Node.js</category>
        
        <category>npm</category>
        
        <category>webkit</category>
        
        <category>PhantomJS</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2017-01-04のJS: PostCSS概要、Chrome開発者ツール、FuseBox</title>
        <description>&lt;p&gt;JSer.info #312 - &lt;a href=&quot;http://qiita.com/morishitter/items/4a04eb144abf49f41d7d&quot; title=&quot;PostCSS まとめ - Qiita&quot;&gt;PostCSS まとめ - Qiita&lt;/a&gt;という記事では、&lt;a href=&quot;https://github.com/postcss/postcss&quot; title=&quot;PostCSS&quot;&gt;PostCSS&lt;/a&gt;とはどのようなものなのかについて書かれています。&lt;/p&gt;

&lt;p&gt;PostCSSはCSSのツール基盤となるフレームワークで、CSSパーサやジェネレータなどを含んでいるもので、プラグインとしてCSSに対する様々な処理を扱えるようになっています(パーサ自体もプラグインで拡張できるのでSassなども一部扱えます。)&lt;/p&gt;

&lt;p&gt;この記事では、PostCSSを使って動くプリプロセッサやLinterといったツールなどについて紹介されています。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://umaar.github.io/devtools-optimise-your-web-development-workflow-2016/#/&quot; title=&quot;Optimise your web development workflow 2016&quot;&gt;Optimise your web development workflow 2016&lt;/a&gt;というスライドでは、Chromeの開発者ツールの機能について紹介されています。&lt;br&gt;
開発者ツールには大量の機能がありますが、GIF画像とともにそれらの機能を紹介しています。&lt;/p&gt;

&lt;p&gt;Elements、Timeline、Networks、Auditsパネルにある機能やそれに関連する仕様やツールなども紹介しているので、&lt;br&gt;
一度見てみると面白いかもしれません。&lt;/p&gt;

&lt;p&gt;また、1Tips/1ページ形式で開発者ツールのTipsを紹介しているので合わせてみると良いかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://umaar.com/dev-tips/&quot; title=&quot;Dev Tips - Developer Tips by Umar Hansa&quot;&gt;Dev Tips - Developer Tips by Umar Hansa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;http://fuse-box.org/&quot; title=&quot;Fusebox&quot;&gt;Fusebox&lt;/a&gt;というbundler/module loaderツールが公開されています。&lt;br&gt;
webpackなどが近いツールで、プラグインで変換レイヤーを追加でき、その結果を一つのファイルにまとめるbundlerです。&lt;br&gt;
また、&lt;code&gt;FuseBox.import&lt;/code&gt;というLoader APIも合わせて利用でき、webpackやSystemJSなどに近い機能を持っています。&lt;/p&gt;

&lt;p&gt;高速な変換がウリの一つで、モジュールの依存関係と変換済みファイルをキャッシュすることで、再変換時の処理時間が短くできるようになっています。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;FuseBox cache and deps.json &lt;a href=&quot;https://t.co/4EjS62HY28&quot;&gt;pic.twitter.com/4EjS62HY28&lt;/a&gt;&lt;/p&gt;&amp;mdash; azu (@azu_re) &lt;a href=&quot;https://twitter.com/azu_re/status/816568272736788480&quot;&gt;January 4, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fuse-box/fuse-box&quot; title=&quot;fuse-box/fuse-box&quot;&gt;fuse-box/fuse-box&lt;/a&gt;のソースコードはTypeScriptで書かれていて、&lt;br&gt;
まだでたばかりなのでソースコードを見てみるのも面白いかもしれません。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;お知らせ&quot;&gt;お知らせ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jser/ping&quot; title=&quot;jser/ping&quot;&gt;jser/ping&lt;/a&gt;にPingのIssueを立てると&lt;a href=&quot;https://twitter.com/jser_info&quot; title=&quot;@jser_info&quot;&gt;@jser_info&lt;/a&gt;のTwitterに流れるようになりました&lt;/li&gt;
&lt;li&gt;データ分析用に&lt;a href=&quot;https://jser.info/data-dashboard/&quot; title=&quot;JSer.info Data Dashboard&quot;&gt;JSer.info Data Dashboard&lt;/a&gt;を作りました

&lt;ul&gt;
&lt;li&gt;JSer.infoの記事や紹介URLに関するデータを色々な形でみることを目的にしたページです&lt;/li&gt;
&lt;li&gt;面白そうなデータの読み方があるなら&lt;a href=&quot;https://github.com/jser/data-dashboard&quot; title=&quot;jser/data-dashboard: JSer.info Data Dashboard.&quot;&gt;jser/data-dashboard: JSer.info Data Dashboard.&lt;/a&gt;にIssue/PRを立てると良さそうです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;stealjs-1.0-release&quot;&gt;StealJS 1.0 Release&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bitovi.com/blog/stealjs-1.0-release&quot; title=&quot;StealJS 1.0 Release&quot;&gt;www.bitovi.com/blog/stealjs-1.0-release&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;開発時は動的なモジュールローダで、本番時はsteal-toolsでのproduction buildでbundleできるStealJS 1.0リリース&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VKydmxRm6w8&quot; title=&quot;Easy ES6 with StealJS - YouTube&quot;&gt;Easy ES6 with StealJS - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;optimizing-page-speeds-with-lazyloading-|-jscrambler-blog&quot;&gt;Optimizing Page Speeds With Lazyloading | Jscrambler Blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.jscrambler.com/optimizing-page-speeds-with-lazyloading/&quot; title=&quot;Optimizing Page Speeds With Lazyloading | Jscrambler Blog&quot;&gt;blog.jscrambler.com/optimizing-page-speeds-with-lazyloading/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;AngularJS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AngularのルーティングとコンポーネントのLazyLoadについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;lazy-loading---react&quot;&gt;Lazy Loading - React&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/guides/lazy-load-react/&quot; title=&quot;Lazy Loading - React&quot;&gt;webpack.js.org/guides/lazy-load-react/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webpack&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;webpack2を使ったReactコンポーネントのLazyLoad方法についてのドキュメント&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;flowtypeでfluxアーキテクチャに型付けをするという発表をした---please-drive-faster&quot;&gt;FlowtypeでFluxアーキテクチャに型付けをするという発表をした - Please Drive Faster&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://joe-re.hatenablog.com/entry/2016/12/29/204917&quot; title=&quot;FlowtypeでFluxアーキテクチャに型付けをするという発表をした - Please Drive Faster&quot;&gt;joe-re.hatenablog.com/entry/2016/12/29/204917&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;flowtype&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Flux&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;FlowTypeを使ってFluxアーキテクチャのパターンに型を付ける話&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/joe-re/items/d6fd262a8c6017f41e22&quot; title=&quot;flowtypeによりFluxにおいて型安全を手に入れる - Qiita&quot;&gt;flowtypeによりFluxにおいて型安全を手に入れる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;node.js-interview-questions-and-answers-(2017-edition)-|-@risingstack&quot;&gt;Node.js Interview Questions and Answers (2017 Edition) | @RisingStack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.risingstack.com/node-js-interview-questions-and-answers-2017/&quot; title=&quot;Node.js Interview Questions and Answers (2017 Edition) | @RisingStack&quot;&gt;blog.risingstack.com/node-js-interview-questions-and-answers-2017/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;security&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsにおいて良くある質問とその答えについてをQ&amp;amp;A形式で書かれたもの。&lt;br&gt;
コーディングスタイル、よくある書き間違い、セキュリティ、タイミング攻撃などについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;react-interview-questions&quot;&gt;React Interview Questions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://tylermcginnis.com/react-interview-questions/&quot; title=&quot;React Interview Questions&quot;&gt;tylermcginnis.com/react-interview-questions/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Reactについての疑問をQ&amp;amp;A形式で書かれた記事。&lt;br&gt;
Classで書くコンポーネントと関数として書くコンポーネントの違い、&lt;code&gt;refs&lt;/code&gt;とは何か、&lt;code&gt;key&lt;/code&gt;属性はなぜ大事なのか、コンポーネントパターンなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;writing-html-with-accessibility-in-mind-–-medium&quot;&gt;Writing HTML with accessibility in mind – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@matuzo/writing-html-with-accessibility-in-mind-a62026493412&quot; title=&quot;Writing HTML with accessibility in mind – Medium&quot;&gt;medium.com/@matuzo/writing-html-with-accessibility-in-mind-a62026493412&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;accessibility&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;HTMLとアクセシビリティ(スクリーンリーダー)について&lt;br&gt;
&lt;code&gt;lang&lt;/code&gt;属性、&lt;code&gt;alt&lt;/code&gt;属性、&lt;code&gt;&amp;lt;buton&amp;gt;&lt;/code&gt;要素、landmarksについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;postcss-まとめ---qiita&quot;&gt;PostCSS まとめ - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/morishitter/items/4a04eb144abf49f41d7d&quot; title=&quot;PostCSS まとめ - Qiita&quot;&gt;qiita.com/morishitter/items/4a04eb144abf49f41d7d&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;PostCSS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;PostCSSの概要と特徴、作られたモチベーションについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;front-end-performance-checklist-2017-(pdf,-apple-pages)-–-smashing-magazine&quot;&gt;Front-End Performance Checklist 2017 (PDF, Apple Pages) – Smashing Magazine&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2016/12/front-end-performance-checklist-2017-pdf-pages/&quot; title=&quot;Front-End Performance Checklist 2017 (PDF, Apple Pages) – Smashing Magazine&quot;&gt;www.smashingmagazine.com/2016/12/front-end-performance-checklist-2017-pdf-pages/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;performance&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ウェブフロントエンドのパフォーマンスチェックリスト。&lt;br&gt;
ファイルサイズ、配信方法、レンダリング、モニタリング、テスト方法などについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;the-reflect-api-of-es6-–-zsolt-nagy&quot;&gt;The Reflect API of ES6 – Zsolt Nagy&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zsoltnagy.eu/the-reflect-api-of-es6/&quot; title=&quot;The Reflect API of ES6 – Zsolt Nagy&quot;&gt;www.zsoltnagy.eu/the-reflect-api-of-es6/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Reflect APIについての紹介記事&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;mozanime-in-2016-|-nothing-new&quot;&gt;MozAnime in 2016 | Nothing new&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://birtles.wordpress.com/2016/12/27/mozanime-in-2016/&quot; title=&quot;MozAnime in 2016 | Nothing new&quot;&gt;birtles.wordpress.com/2016/12/27/mozanime-in-2016/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;firefox&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;animation&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2016年におけるFirefoxのWeb Animations対応やデバッグ機能の更新点について&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;スライド、動画関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;optimise-your-web-development-workflow-2016&quot;&gt;Optimise your web development workflow 2016&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://umaar.github.io/devtools-optimise-your-web-development-workflow-2016/&quot; title=&quot;Optimise your web development workflow 2016&quot;&gt;umaar.github.io/devtools-optimise-your-web-development-workflow-2016/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Chrome&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;slide&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;accessibility&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Chromeの開発者ツールについてのスライド。&lt;br&gt;
主にCSS、アクセシビリティ、パフォーマンスについて豊富なGIFアニメーションと共に紹介している。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;fuse-box-bundler-/-api-reference&quot;&gt;Fuse-Box bundler / API Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://fuse-box.org/&quot; title=&quot;Fuse-Box bundler / API Reference&quot;&gt;fuse-box.org/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;webpack/Browserifyのようなbundler、JSPM/SystemJSのようなloaderを機能を持つツール。&lt;br&gt;
変換結果の依存関係とキャッシュをすることで高速な変換ができる。&lt;br&gt;
プラグインで対応する変換を拡張できる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@ivanorlov/fusebox-bundle-your-project-within-a-fraction-of-a-second-f2360ba95727&quot; title=&quot;FuseBox — bundle your project within a fraction of a second&quot;&gt;FuseBox — bundle your project within a fraction of a second&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;gothdo/range:-a-javascript-implementation-of-the-python&amp;#x27;s-range()-function.&quot;&gt;Gothdo/range: A JavaScript implementation of the Python&amp;#x27;s range() function.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Gothdo/range&quot; title=&quot;Gothdo/range: A JavaScript implementation of the Python&amp;#39;s range() function.&quot;&gt;github.com/Gothdo/range&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Pythonの&lt;code&gt;range()&lt;/code&gt;のJavaScript実装ライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;andywer/leakage:-🐛-memory-leak-testing-for-node.&quot;&gt;andywer/leakage: 🐛 Memory leak testing for node.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/andywer/leakage&quot; title=&quot;andywer/leakage: 🐛 Memory leak testing for node.&quot;&gt;github.com/andywer/leakage&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;libn&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsでメモリリークのテストを書くことができるライブラリ。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;nolanlawson/marky:-high-resolution-javascript-timer-based-on-performance.mark()-and-measure()&quot;&gt;nolanlawson/marky: High-resolution JavaScript timer based on performance.mark() and measure()&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nolanlawson/marky&quot; title=&quot;nolanlawson/marky: High-resolution JavaScript timer based on performance.mark() and measure()&quot;&gt;github.com/nolanlawson/marky&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;performance&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;libn&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;User Timing API(&lt;code&gt;performance.mark&lt;/code&gt;と&lt;code&gt;performance.measure&lt;/code&gt;)ベースの処理時間計測ライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;maniart/diffyjs:-a-dependency-free-motion-detection-library-for-the-browser&quot;&gt;maniart/diffyjs: A dependency-free motion detection library for the browser&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/maniart/diffyjs&quot; title=&quot;maniart/diffyjs: A dependency-free motion detection library for the browser&quot;&gt;github.com/maniart/diffyjs&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;画像&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MediaDevices.getUserMedia()&lt;/code&gt;を使って取得した画像から、フレームごとの動きのdiffを取得できるライブラリ。&lt;br&gt;
motion detectionライブラリ&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Wed, 04 Jan 2017 17:28:00 +0900</pubDate>
        <link>https://jser.info/2017/01/04/postcss-chrome-fusebox/</link>
        <guid isPermaLink="true">https://jser.info/2017/01/04/postcss-chrome-fusebox/</guid>
        
        <category>bundler</category>
        
        <category>Tools</category>
        
        <category>Chrome</category>
        
        <category>PostCSS</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2016-12-27のJS: SharedArrayBufferとAtomics API、Node.js Stream、JavaScript obfuscator</title>
        <description>&lt;p&gt;JSer.info #311 - Safari Technology Preview Release 20とMSEdgeのJavaScriptエンジンである&lt;a href=&quot;https://github.com/Microsoft/ChakraCore/wiki/Release-Notes#v140&quot; title=&quot;ChakraCore 1.4.0&quot;&gt;ChakraCore 1.4.0&lt;/a&gt;が公開されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/ChakraCore/wiki/Release-Notes#v140&quot;&gt;Release Notes · Microsoft/ChakraCore Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webkit.org/blog/7120/release-notes-for-safari-technology-preview-20/&quot;&gt;Release Notes for Safari Technology Preview 20 | WebKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どちらも&lt;a href=&quot;http://tc39.github.io/ecmascript_sharedmem/shmem.html#GlobalObject.ConstructorProps.SharedArrayBuffer&quot; title=&quot;SharedArrayBuffer&quot;&gt;SharedArrayBuffer&lt;/a&gt;が実装されています。&lt;br&gt;
SharedArrayBufferは、WebWorkerとの間でもデータを共有できる&lt;a href=&quot;https://github.com/tc39/proposals&quot;&gt;Stage 3のProposal&lt;/a&gt;仕様です。&lt;/p&gt;

&lt;p&gt;データをコピーや&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/API/Transferable&quot;&gt;Transfer&lt;/a&gt;ではなく、メモリで共有する仕様です。(いわゆる共有メモリ)&lt;br&gt;
複数のスレッドがメモリ内の同じデータを読み書きするため、スレッドセーフなAPIが必要になります。&lt;br&gt;
そのため、&lt;a href=&quot;https://github.com/tc39/ecmascript_sharedmem&quot; title=&quot;tc39/ecmascript_sharedmem: Shared memory and atomics for ECMAscript&quot;&gt;tc39/ecmascript_sharedmem&lt;/a&gt;の仕様では不可分操作を提供する&lt;code&gt;Atomics&lt;/code&gt; APIが合わせて定義されています。&lt;/p&gt;

&lt;p&gt;SharedArrayBufferとAtomics APIについて、詳しくは次のURLを見るのが良いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecmascript_sharedmem&quot; title=&quot;tc39/ecmascript_sharedmem: Shared memory and atomics for ECMAscript&quot;&gt;tc39/ecmascript_sharedmem: Shared memory and atomics for ECMAscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2016/05/a-taste-of-javascripts-new-parallel-primitives/&quot;&gt;A Taste of JavaScript’s New Parallel Primitives ★ Mozilla Hacks – the Web developer blog&lt;/a&gt;(&lt;a href=&quot;https://dev.mozilla.jp/2016/05/a-taste-of-javascripts-new-parallel-primitives/&quot;&gt;翻訳&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/chikoski/20161113-nodefest&quot;&gt;JavaScriptでの並列プログラミング: 共有メモリーと不可分操作、ロック // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://js-next.hatenablog.com/entry/2015/09/30/225251&quot; title=&quot;SharedArrayBufferとAtomics APIについて - JS.next&quot;&gt;SharedArrayBufferとAtomics APIについて - JS.next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stage 3の仕様ですが、既に2つ以上の実装があるため、&lt;a href=&quot;https://github.com/tc39/agendas/blob/master/2017/01.md&quot;&gt;次のTC39 Meeting(2017年1月)&lt;/a&gt;でStage 4となる予定です。&lt;br&gt;
そのため、ES2017として公開される可能性があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rwaldron/tc39-notes/blob/master/es7/2016-11/nov-30.md#13iia-sharedarraybuffer&quot; title=&quot;tc39-notes/nov-30.md at master · rwaldron/tc39-notes&quot;&gt;tc39-notes/nov-30.md at master · rwaldron/tc39-notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この仕様に先んじて、ECMAScriptに&amp;quot;Agent&amp;quot;という概念が既に追加されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecma262/pull/522&quot; title=&quot;Add language to define Agents by lars-t-hansen · Pull Request #522 · tc39/ecma262&quot;&gt;Add language to define Agents by lars-t-hansen · Pull Request #522 · tc39/ecma262&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、2016年11月のTC39 MeetingでStageが変わったProposalは次の記事にまとめてあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ecmascript-daily.github.io/ecmascript/2016/12/22/ecmascript-proposals&quot; title=&quot;ECMAScript proposal updates @ 2016-11 | ECMAScript Daily&quot;&gt;ECMAScript proposal updates @ 2016-11 | ECMAScript Daily&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/Mizunashi_Mana/items/872354cd7bf25090932f&quot; title=&quot;Stream API入門 - Qiita&quot;&gt;Stream API入門 - Qiita&lt;/a&gt;では、Node.jsのStream APIについて解説されています。コールバックやPromise、Generator、async/awaitなどの非同期処理についても触れています。&lt;/p&gt;

&lt;p&gt;Node.js Streamの特徴の一つでもあるバッファリングとバックプレッシャーについては合わせて次の記事を見てみるといいかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://techblog.yahoo.co.jp/advent-calendar-2016/node-stream-highwatermark/&quot; title=&quot;highWaterMarkから探るNode.jsのStreamの仕組み - Yahoo! JAPAN Tech Blog&quot;&gt;highWaterMarkから探るNode.jsのStreamの仕組み - Yahoo! JAPAN Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これとは別で、WHATWGが提案している&lt;a href=&quot;https://streams.spec.whatwg.org/&quot; title=&quot;Streams Standard&quot;&gt;Streams Standard&lt;/a&gt;(Fetch APIなどと連携する)も合わせて見ると面白いかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/streams/blob/master/FAQ.md&quot; title=&quot;streams/FAQ.md at master · whatwg/streams&quot;&gt;streams/FAQ.md at master · whatwg/streams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、データのストリーム処理はJavaScriptという言語にかぎらずあるものなので、次の記事も見てみるとストリーム処理の特徴が分かりやすいかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/kimutansk/items/60e48ec15e954fa95e1c&quot; title=&quot;ストリーム処理とは何か？＋2016年の出来事 - Qiita&quot;&gt;ストリーム処理とは何か？＋2016年の出来事 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;say-allo&amp;#x27;-to-yeoman-generator-1.0-|-yeoman&quot;&gt;Say allo&amp;#x27; to yeoman-generator 1.0 | Yeoman&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://yeoman.io/blog/hello-generator-1.0.html&quot; title=&quot;Say allo&amp;#39; to yeoman-generator 1.0 | Yeoman&quot;&gt;yeoman.io/blog/hello-generator-1.0.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ジェネレーター&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Yeoman-generator 1.0リリース。&lt;br&gt;
&lt;code&gt;composeWith&lt;/code&gt;のAPIを簡略化、Yarnサポート、deprecatedなAPIを削除など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeoman/generator/releases/tag/v1.0.0&quot; title=&quot;Release v1.0.0 🎉 · yeoman/generator&quot;&gt;Release v1.0.0 🎉 · yeoman/generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-notes-·-microsoft/chakracore-wiki&quot;&gt;Release Notes · Microsoft/ChakraCore Wiki&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/ChakraCore/wiki/Release-Notes#v140&quot; title=&quot;Release Notes · Microsoft/ChakraCore Wiki&quot;&gt;github.com/Microsoft/ChakraCore/wiki/Release-Notes#v140&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;MSEdge&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ChakraCore 1.4リリース。&lt;br&gt;
JITがLinuxやmacOSでも有効化、async/awaitをデフォルトで有効化、SharedArrayBufferを実験的にサポート、wasmの実験的サポートなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-notes-for-safari-technology-preview-20-|-webkit&quot;&gt;Release Notes for Safari Technology Preview 20 | WebKit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://webkit.org/blog/7120/release-notes-for-safari-technology-preview-20/&quot; title=&quot;Release Notes for Safari Technology Preview 20 | WebKit&quot;&gt;webkit.org/blog/7120/release-notes-for-safari-technology-preview-20/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;safari&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;webkit&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Safari Technology Preview Release 20リリース。&lt;br&gt;
Visual Viewport、SharedArrayBufferを有効化、&lt;code&gt;block-all-mixed-content&lt;/code&gt;の追加、BlinkからportしたCSSパーサを使うようになるなど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2015/01/What-the-Viewport&quot; title=&quot;What the Virtual Viewport?  |  Web  |  Google Developers&quot;&gt;What the Virtual Viewport?  |  Web  |  Google Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lars-t-hansen/ecmascript_sharedmem&quot; title=&quot;lars-t-hansen/ecmascript\_sharedmem: Placeholder for old shared memory spec&quot;&gt;lars-t-hansen/ecmascript_sharedmem: Placeholder for old shared memory spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-3rd-mutation-·-canjs/canjs&quot;&gt;Release 3rd Mutation · canjs/canjs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/canjs/canjs/releases/tag/v3.0.0&quot; title=&quot;Release 3rd Mutation · canjs/canjs&quot;&gt;github.com/canjs/canjs/releases/tag/v3.0.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CanJS 3.0リリース&lt;br&gt;
コードは&lt;code&gt;can-*&lt;/code&gt;からなるモジュールに分割され、&lt;code&gt;.attr()&lt;/code&gt;の代わりに&lt;code&gt;DefineMap&lt;/code&gt;の導入など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mag.osdn.jp/16/12/22/160000&quot; title=&quot;JavaScriptフレームワーク「CanJS 3.0」リリース | OSDN Magazine&quot;&gt;JavaScriptフレームワーク「CanJS 3.0」リリース | OSDN Magazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://donejs.com/&quot; title=&quot;donejs - donejs&quot;&gt;donejs - donejs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;ecmascript-proposal-updates-@-2016-11-|-ecmascript-daily&quot;&gt;ECMAScript proposal updates @ 2016-11 | ECMAScript Daily&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ecmascript-daily.github.io/ecmascript/2016/12/22/ecmascript-proposals&quot; title=&quot;ECMAScript proposal updates @ 2016-11 | ECMAScript Daily&quot;&gt;ecmascript-daily.github.io/ecmascript/2016/12/22/ecmascript-proposals&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;proposal&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2016年11月のTC39ミーティングでのProposalのStage変動をまとめたもの&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;stream-api入門---qiita&quot;&gt;Stream API入門 - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/Mizunashi_Mana/items/872354cd7bf25090932f&quot; title=&quot;Stream API入門 - Qiita&quot;&gt;qiita.com/Mizunashi_Mana/items/872354cd7bf25090932f&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;stream&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsのStream APIについて。&lt;br&gt;
非同期処理のコールバック、Promise、async/await、generatorを踏まえてのStreamについての解説。&lt;br&gt;
Write/Read/Duplex、Stream処理が得意とすること、&lt;code&gt;objectMode&lt;/code&gt;についてなど幅広く解説されてる&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;css-writing-modes-◆-24-ways&quot;&gt;CSS Writing Modes ◆ 24 ways&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://24ways.org/2016/css-writing-modes/&quot; title=&quot;CSS Writing Modes ◆ 24 ways&quot;&gt;24ways.org/2016/css-writing-modes/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CSSの&lt;code&gt;writing-mode&lt;/code&gt;プロパティについての解説&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;かずぽんブログ-•-vue.js-2016年まとめ-&amp;amp;-今後&quot;&gt;かずぽんブログ • Vue.js 2016年まとめ &amp;amp; 今後&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.kazupon.jp/post/154903508388/vuejs-2016-closing-and-future&quot; title=&quot;かずぽんブログ • Vue.js 2016年まとめ &amp;amp; 今後&quot;&gt;blog.kazupon.jp/post/154903508388/vuejs-2016-closing-and-future&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2016年のVue.jsの変化について。&lt;br&gt;
Vue.js 2.0、コミュニティ、エコシステム、利用範囲や今後について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;firebug-lives-on-in-firefox-devtools-★-mozilla-hacks-–-the-web-developer-blog&quot;&gt;Firebug lives on in Firefox DevTools ★ Mozilla Hacks – the Web developer blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hacks.mozilla.org/2016/12/firebug-lives-on-in-firefox-devtools/&quot; title=&quot;Firebug lives on in Firefox DevTools ★ Mozilla Hacks – the Web developer blog&quot;&gt;hacks.mozilla.org/2016/12/firebug-lives-on-in-firefox-devtools/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Firebug&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;firefox&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;debug&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Firebugは開発終了したが、多くの機能はFirefoxの開発者ツールに引き継がれている/引き継ぐ予定があるという話。&lt;/p&gt;

&lt;p&gt;またFirebugはマルチプロセス対応を念頭に開発されたものではなかったため、Firebugを拡張するよりも、Firefoxの開発者ツールを拡張していく方が良いという決定がされた。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;web-アクセシビリティ向け-node.js-製の自動チェックツールや-devtools-用の拡張機能など-::ハブろぐ&quot;&gt;Web アクセシビリティ向け Node.js 製の自動チェックツールや DevTools 用の拡張機能など ::ハブろぐ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://havelog.ayumusato.com/develop/a11y/e732-a11y_checking_automate.html&quot; title=&quot;Web アクセシビリティ向け Node.js 製の自動チェックツールや DevTools 用の拡張機能など ::ハブろぐ&quot;&gt;havelog.ayumusato.com/develop/a11y/e732-a11y_checking_automate.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;accessibility&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;test&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Webアクセシビリティの自動チェックツールや補助ツールの紹介。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;javascriptのuiライブラリはどうあるべきかという話とonsen-uiのアーキテクチャ---id:anatooのブログ&quot;&gt;JavaScriptのUIライブラリはどうあるべきかという話とOnsen UIのアーキテクチャ - id:anatooのブログ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.anatoo.jp/entry/2016/12/09/201511&quot; title=&quot;JavaScriptのUIライブラリはどうあるべきかという話とOnsen UIのアーキテクチャ - id:anatooのブログ&quot;&gt;blog.anatoo.jp/entry/2016/12/09/201511&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;UI&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;特定のUIフレームワークに依存されないUIフレームワークの基盤をどのように作るかという話。&lt;br&gt;
CSS Components層、Web Components層、フレームワークバインディング層のレイヤー分けについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;serviceworker内にexpressサーバーを立てる---qiita&quot;&gt;ServiceWorker内にExpressサーバーを立てる - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/narirou/items/738a0fe6656d0f905e28&quot; title=&quot;ServiceWorker内にExpressサーバーを立てる - Qiita&quot;&gt;qiita.com/narirou/items/738a0fe6656d0f905e28&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ServiceWorker&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;express-serviceがどのようにして実際のNode.jsで動くExpressのコードをServiceWorkerの中でも擬似的に動かしているのかについての解説&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/express-service&quot; title=&quot;express-service&quot;&gt;express-service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;サイト、サービス、ドキュメント&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;accessibility---learn-web-development-|-mdn&quot;&gt;Accessibility - Learn web development | MDN&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Accessibility&quot; title=&quot;Accessibility - Learn web development | MDN&quot;&gt;developer.mozilla.org/en-US/docs/Learn/Accessibility&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;accessibility&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;web &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;アクセシビリティについてのガイド&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;speedtracker&quot;&gt;SpeedTracker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://speedtracker.org/&quot; title=&quot;SpeedTracker&quot;&gt;speedtracker.org/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webservice&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;performance&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;個人向けに使うCalibreやSpeedCurveのような継続的なパフォーマンス計測サービス。&lt;br&gt;
WebPageTestで取った結果をGitHubリポジトリにJekyllで動くようにデータをpushしてくれる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://calendar.perfplanet.com/2016/introducing-speedtracker/&quot; title=&quot;Performance Calendar » Introducing SpeedTracker&quot;&gt;Performance Calendar » Introducing SpeedTracker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;mithril、vue.jsの仮想dom用のi18nライブラリ作った---qiita&quot;&gt;Mithril、Vue.jsの仮想DOM用のi18nライブラリ作った - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/shibukawa/items/c2298b21b4629941b230&quot; title=&quot;Mithril、Vue.jsの仮想DOM用のi18nライブラリ作った - Qiita&quot;&gt;qiita.com/shibukawa/items/c2298b21b4629941b230&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;i18n&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsでもブラウザでも動作するi18nライブラリ。&lt;br&gt;
プレースホルダ、複数形、コンテキスト、&lt;code&gt;data-i18n&lt;/code&gt;属性に対する翻訳する機能を持つ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://i18n4v.js.org/&quot; title=&quot;i18n for Virtual DOM (i18n4v) — i18n for virtual dom 0.1.5 documentation&quot;&gt;i18n for Virtual DOM (i18n4v) — i18n for virtual dom 0.1.5 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;devongovett/regexgen:-generate-regular-expressions-that-match-a-set-of-strings&quot;&gt;devongovett/regexgen: Generate regular expressions that match a set of strings&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/devongovett/regexgen&quot; title=&quot;devongovett/regexgen: Generate regular expressions that match a set of strings&quot;&gt;github.com/devongovett/regexgen&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;正規表現&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;複数の文字列を渡して、それにマッチする正規表現を作るライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;javascript-obfuscator/javascript-obfuscator:-javascript-obfuscator-for-node.js&quot;&gt;javascript-obfuscator/javascript-obfuscator: JavaScript obfuscator for Node.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/javascript-obfuscator/javascript-obfuscator&quot; title=&quot;javascript-obfuscator/javascript-obfuscator: JavaScript obfuscator for Node.js&quot;&gt;github.com/javascript-obfuscator/javascript-obfuscator&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JavaScriptの難読化ツール/ライブラリ。&lt;br&gt;
ES2015+のコードを扱うことができ、Source Mapにも対応している&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;amilajack/eslint-plugin-compat:-browser-and-es-spec-compatibility-assertion-with-eslint&quot;&gt;amilajack/eslint-plugin-compat: Browser and ES spec compatibility assertion with ESLint&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/amilajack/eslint-plugin-compat&quot; title=&quot;amilajack/eslint-plugin-compat: Browser and ES spec compatibility assertion with ESLint&quot;&gt;github.com/amilajack/eslint-plugin-compat&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ESLint&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AutoPrefixerのように想定ブラウザを記述し、そのブラウザで動かないAPIを使ってないかをチェックするESLintルール。&lt;br&gt;
caniuseやcompat tableのデータを使う&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Tue, 27 Dec 2016 09:58:00 +0900</pubDate>
        <link>https://jser.info/2016/12/27/sharedarraybuffer-javascript-obfuscator-node.js-stream/</link>
        <guid isPermaLink="true">https://jser.info/2016/12/27/sharedarraybuffer-javascript-obfuscator-node.js-stream/</guid>
        
        <category>browser</category>
        
        <category>ECMAScript</category>
        
        <category>Node.js</category>
        
        <category>Stream</category>
        
        <category>Tools</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2016-12-20のJS: RxJS v5、Angular、date-fns</title>
        <description>&lt;p&gt;JSer.info #310 - &lt;a href=&quot;https://github.com/ReactiveX/rxjs&quot; title=&quot;RxJS 5&quot;&gt;RxJS 5&lt;/a&gt;がリリースされました。&lt;br&gt;
Microsoftがメンテナンスしていた&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot; title=&quot;Reactive-Extensions/RxJS&quot;&gt;Reactive-Extensions/RxJS&lt;/a&gt;(RxJS 4)を書き直したバージョンで、互換性がある部分はありますがAPIも色々変更されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#500-2016-12-13&quot; title=&quot;rxjs/CHANGELOG.md at master · ReactiveX/rxjs&quot;&gt;rxjs/CHANGELOG.md at master · ReactiveX/rxjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;v4からv5へのマイグレーションは次のドキュメントにまとめられています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md&quot; title=&quot;Migrating from RxJS 4 to 5&quot;&gt;Migrating from RxJS 4 to 5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RxJS v5は現在Stage 1の&lt;a href=&quot;https://github.com/tc39/proposal-observable&quot; title=&quot;ECMAScript Observable&quot;&gt;ECMAScript Observable&lt;/a&gt; Proposalに準拠した実装です。&lt;br&gt;
(&lt;a href=&quot;https://thefeedbackloop.xyz/tc39-a-process-sketch-stages-0-and-1/&quot; title=&quot;Stage 1&quot;&gt;Stage 1&lt;/a&gt;なので仕様自体が変わる可能性はあります)&lt;/p&gt;

&lt;p&gt;また、デバッグのしやすさやパフォーマンスなどが改善され、Rxの特徴と言えるOperatorが整理されています。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;AngularJS 1.xの最新版である&lt;a href=&quot;http://angularjs.blogspot.jp/2016/12/angular-160-released.html&quot; title=&quot;AngularJS 1.6.0&quot;&gt;AngularJS 1.6.0&lt;/a&gt;がリリースされました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://angularjs.blogspot.jp/2016/12/angular-160-released.html&quot; title=&quot;Angular: Angular 1.6.0 released&quot;&gt;Angular: Angular 1.6.0 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/CHANGELOG.md#160-rainbow-tsunami-2016-12-08&quot; title=&quot;1.6.0 rainbow-tsunami (2016-12-08)&quot;&gt;1.6.0 rainbow-tsunami (2016-12-08)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しい変更点は&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/CHANGELOG.md#160-rainbow-tsunami-2016-12-08&quot;&gt;CHANGELOG&lt;/a&gt;にかかれています。&lt;br&gt;
jqLiteをjQuery 3の挙動に合わせるように変更、&lt;a href=&quot;http://angularjs.blogspot.jp/2016/09/angular-16-expression-sandbox-removal.html&quot;&gt;Expression Sandboxを削除&lt;/a&gt;。&lt;br&gt;
また、JSONPリクエストはホワイトリストがデフォルトになるなど多数のBreaking Changeが含まれています。&lt;/p&gt;

&lt;p&gt;AngularJS 1.xはsemverではありませんが、2.0からはsemverに沿う方針へ変更されています。&lt;br&gt;
加えて2.0はタイムラインベースのアップデートも行うため、Angaular 2からは半年ごとのmajorアップデートを行います。&lt;br&gt;
また、3.xは&lt;code&gt;@angular/router&lt;/code&gt;がすでにv3を使っていて、バージョンがずれてしまうため、次のメジャーバージョンはv4となるそうです。&lt;/p&gt;

&lt;p&gt;詳しくは、次の記事で解説されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://angularjs.blogspot.jp/2016/12/ok-let-me-explain-its-going-to-be.html&quot; title=&quot;Angular: Ok... let me explain: it&amp;amp;#39;s going to be Angular 4.0, or just Angular&quot;&gt;Angular: Ok... let me explain: it&amp;#39;s going to be Angular 4.0, or just Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.publickey1.jp/blog/16/angularangular_420173angular.html&quot; title=&quot;Angularの次バージョンは「Angular 4」に、2017年3月リリース。今後は単に「Angular」と呼んでほしいと － Publickey&quot;&gt;Angularの次バージョンは「Angular 4」に、2017年3月リリース。今後は単に「Angular」と呼んでほしいと － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AngularのLTSについては特に決まっていないようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/angular/issues/12331&quot; title=&quot;Angular LTS version · Issue #12331 · angular/angular&quot;&gt;Angular LTS version · Issue #12331 · angular/angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://date-fns.org/&quot; title=&quot;date-fns - modern JavaScript date utility library&quot;&gt;date-fns - modern JavaScript date utility library&lt;/a&gt;というライブラリは&lt;a href=&quot;http://momentjs.com/&quot; title=&quot;Moment.js&quot;&gt;Moment.js&lt;/a&gt;のように日付周りを扱うutility集ライブラリです。&lt;br&gt;
&lt;a href=&quot;https://lodash.com/&quot; title=&quot;Lodash&quot;&gt;Lodash&lt;/a&gt;のように、それぞれの操作を独立した関数として扱うことが目的の一つとなっています。&lt;br&gt;
そのため、必要なものだけを読み込んで使うことができます。&lt;/p&gt;

&lt;p&gt;また、Moment.jsは基本的にMutableなAPIとなっていますが、date-fnsはImmutableなAPIとなっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Moment.jsでもImmutableに扱うAPIの提案がでています&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/moment/moment-rfcs/pull/2&quot; title=&quot;Support a pseudo-immutable API (first-party Frozen Moment) by butterflyhug · Pull Request #2 · moment/moment-rfcs&quot;&gt;Support a pseudo-immutable API (first-party Frozen Moment) by butterflyhug · Pull Request #2 · moment/moment-rfcs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まだ開発中の部分もありますが、現在の状況は次にまとめられています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/date-fns/date-fns/issues/275#issuecomment-264934189&quot; title=&quot;Add a brief comparison with Moment.js? · Issue #275 · date-fns/date-fns&quot;&gt;Add a brief comparison with Moment.js? · Issue #275 · date-fns/date-fns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;お知らせ&quot;&gt;お知らせ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jser.connpass.com/event/46997/&quot; title=&quot;JSer.info 6周年と300回記念イベント - connpass&quot;&gt;JSer.info 6周年と300回記念イベント - connpass&lt;/a&gt;の抽選結果が発表されています。&lt;br&gt;
まだ、発表枠があるので何か話したい事がある人は申し込んで見てください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.info/2016/12/13/announcement-jser-info-6years-event/&quot; title=&quot;2017年1月15日(日)に JSer.info 6周年 &amp;amp;amp;&amp;amp;amp; 300回目記念イベント を開催します - JSer.info&quot;&gt;2017年1月15日(日)に JSer.info 6周年 &amp;amp;&amp;amp; 300回目記念イベント を開催します - JSer.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、当日JavaScript Discussionというコーナーで次の質問ボードを元に議論する時間が設けています。&lt;br&gt;
質問、聞きたいこと、話したいこと、主張を書き込むことができます。&lt;br&gt;
当日も時間を取りますが、事前に書いてもらっても問題ありません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://app.sli.do/event/bkry5ojl/ask&quot; title=&quot;JSer.info 6周年 - JavaScript Discussion&quot;&gt;JSer.info 6周年 - JavaScript Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;気になる質問は &lt;img class=&#39;emoji&#39; title=&#39;:+1:&#39; alt=&#39;:+1:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f44d.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; で投票すると上に来るのでテーマとして取り上げやすくなります。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;rxjs/changelog.md-at-master-·-reactivex/rxjs&quot;&gt;rxjs/CHANGELOG.md at master · ReactiveX/rxjs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md&quot; title=&quot;rxjs/CHANGELOG.md at master · ReactiveX/rxjs&quot;&gt;github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;RxJS 5.0.0リリース&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;jsdom/changelog.md-at-9.9.0-·-tmpvar/jsdom&quot;&gt;jsdom/Changelog.md at 9.9.0 · tmpvar/jsdom&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tmpvar/jsdom/blob/9.9.0/Changelog.md&quot; title=&quot;jsdom/Changelog.md at 9.9.0 · tmpvar/jsdom&quot;&gt;github.com/tmpvar/jsdom/blob/9.9.0/Changelog.md&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;DOM&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;jsdom 9.9.0リリース。&lt;br&gt;
&lt;code&gt;document.createCDATASection&lt;/code&gt;、&lt;code&gt;node.wholeText&lt;/code&gt;のサポート、バグ修正など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-v5.0.0-·-reactjs/react-redux&quot;&gt;Release v5.0.0 · reactjs/react-redux&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/releases/tag/v5.0.0&quot; title=&quot;Release v5.0.0 · reactjs/react-redux&quot;&gt;github.com/reactjs/react-redux/releases/tag/v5.0.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;redux&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;React-Redux v5.0.0リリース。&lt;br&gt;
後方互換性はあるけどメジャーアップデート、&lt;code&gt;connect()&lt;/code&gt;のオプションを追加、&lt;code&gt;connectAdvanced()&lt;/code&gt;を追加など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;webpack-2.2:-the-release-candidate-–-webpack-–-medium&quot;&gt;webpack 2.2: The Release Candidate – webpack – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/webpack/webpack-2-2-the-release-candidate-2e614d05d75f&quot; title=&quot;webpack 2.2: The Release Candidate – webpack – Medium&quot;&gt;medium.com/webpack/webpack-2-2-the-release-candidate-2e614d05d75f&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webpack&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;webpack 2.2.0 RCリリース。&lt;br&gt;
2.x系初のRCリリースとなってる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v2.2.0-rc.0&quot; title=&quot;Release v2.2.0-rc.0 · webpack/webpack&quot;&gt;Release v2.2.0-rc.0 · webpack/webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-v0.37.0-·-facebook/flow&quot;&gt;Release v0.37.0 · facebook/flow&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/flow/releases/tag/v0.37.0&quot; title=&quot;Release v0.37.0 · facebook/flow&quot;&gt;github.com/facebook/flow/releases/tag/v0.37.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;flowtype&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Flow v0.37.0 リリース。&lt;br&gt;
built-in libの定義を更新、&lt;code&gt;declare module&lt;/code&gt;内で&lt;code&gt;import type&lt;/code&gt;と&lt;code&gt;import typeof&lt;/code&gt;を使えるようになるなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;angular:-angular-1.6.0-released&quot;&gt;Angular: Angular 1.6.0 released&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://angularjs.blogspot.com/2016/12/angular-160-released.html&quot; title=&quot;Angular: Angular 1.6.0 released&quot;&gt;angularjs.blogspot.com/2016/12/angular-160-released.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;AngularJS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AngularJS 1.6.0リリース。&lt;br&gt;
jqLiteをjQuery 3の挙動に合わせるように、expression sandboxを削除。&lt;br&gt;
また、JSONPリクエストはホワイトリストがデフォルトになるなど多數のBreaking Changeが含まれている&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/CHANGELOG.md#160-rainbow-tsunami-2016-12-08&quot; title=&quot;angular.js/CHANGELOG.md at master · angular/angular.js&quot;&gt;angular.js/CHANGELOG.md at master · angular/angular.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.angularjs.org/guide/migration#migrating-from-1-5-to-1-6&quot; title=&quot;AngularJS: Developer Guide: Migrating from Previous Versions&quot;&gt;AngularJS: Developer Guide: Migrating from Previous Versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://angularjs.blogspot.jp/2016/09/angular-16-expression-sandbox-removal.html&quot; title=&quot;Angular: Angular 1.6 - Expression Sandbox Removal&quot;&gt;Angular: Angular 1.6 - Expression Sandbox Removal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;angular:-ok...-let-me-explain:-it&amp;#x27;s-going-to-be-angular-4.0,-or-just-angular&quot;&gt;Angular: Ok... let me explain: it&amp;#x27;s going to be Angular 4.0, or just Angular&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://angularjs.blogspot.com/2016/12/ok-let-me-explain-its-going-to-be.html&quot; title=&quot;Angular: Ok... let me explain: it&amp;#39;s going to be Angular 4.0, or just Angular&quot;&gt;angularjs.blogspot.com/2016/12/ok-let-me-explain-its-going-to-be.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;AngularJS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AngularJSの次のメジャーバージョンは4を予定している話。&lt;br&gt;
既に&lt;code&gt;@angular/router&lt;/code&gt;がv3であるため、合わせるためにv4へあげる。&lt;br&gt;
2017年3月にリリースする予定&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;performance-calendar-»-prefer-defer-over-async&quot;&gt;Performance Calendar » Prefer DEFER Over ASYNC&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://calendar.perfplanet.com/2016/prefer-defer-over-async/&quot; title=&quot;Performance Calendar » Prefer DEFER Over ASYNC&quot;&gt;calendar.perfplanet.com/2016/prefer-defer-over-async/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;performance&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;deferとasync属性について。 どちらもHTMLパースのブロックはしないが、レンダリングのブロックは発生する。&lt;br&gt;
deferは常にdomInteractiveが起きてから実行するため一定、しかしasyncはダウンロード速度によってはメインと被ることもある。&lt;br&gt;
メインコンテンツに関係ないレンダリングを行うスクリプトはdefer属性を試すことで、メインのレンダリングが邪魔されずに進むかを確認した方が良いという話。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;javascript-clean-coding-best-practices-|-@risingstack&quot;&gt;JavaScript Clean Coding Best Practices | @RisingStack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/&quot; title=&quot;JavaScript Clean Coding Best Practices | @RisingStack&quot;&gt;blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;読みやすいJavaScriptのコードを書くためのプラクティス&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;writing-declaration-files-for-@types-|-typescript&quot;&gt;Writing Declaration Files for @types | TypeScript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/typescript/2016/12/14/writing-dts-files-for-types/&quot; title=&quot;Writing Declaration Files for @types | TypeScript&quot;&gt;blogs.msdn.microsoft.com/typescript/2016/12/14/writing-dts-files-for-types/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;TypeScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TypeSriptのDefinitelyTyped向けに型定義ファイルを書く方法について&lt;br&gt;
手で書く方法とdts-genを使う方法について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;実況中継シリーズ-vue.jsで実現するmvvmパターン-fluxアーキテクチャとの距離---re.ra.ku-アドベントカレンダー-day-13---re.ra.ku-tech-blog&quot;&gt;実況中継シリーズ Vue.jsで実現するMVVMパターン Fluxアーキテクチャとの距離 - Re.Ra.Ku アドベントカレンダー day 13 - Re.Ra.Ku tech blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://techblog.reraku.co.jp/entry/2016/12/13/080000&quot; title=&quot;実況中継シリーズ Vue.jsで実現するMVVMパターン Fluxアーキテクチャとの距離 - Re.Ra.Ku アドベントカレンダー day 13 - Re.Ra.Ku tech blog&quot;&gt;techblog.reraku.co.jp/entry/2016/12/13/080000&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;MVC&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Flux&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;MVVMとFluxのアーキテクチャに似ている部分と異なる部分について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;survivejs---inferno---blazing-fast,-react-like-ui-library---interview-with-dominic-gannaway&quot;&gt;SurviveJS - Inferno - Blazing fast, React-like UI library - Interview with Dominic Gannaway&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://survivejs.com/blog/inferno-interview/&quot; title=&quot;SurviveJS - Inferno - Blazing fast, React-like UI library - Interview with Dominic Gannaway&quot;&gt;survivejs.com/blog/inferno-interview/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ReactライクなVirtual DOMを使ったUIライブラリであるInfernoの特徴について。&lt;br&gt;
どのような仕組みで動いているのか、Reactなどとの違いについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;the-inner-workings-of-virtual-dom-–-medium&quot;&gt;The Inner Workings Of Virtual DOM – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@rajaraodv/the-inner-workings-of-virtual-dom-666ee7ad47cf&quot; title=&quot;The Inner Workings Of Virtual DOM – Medium&quot;&gt;medium.com/@rajaraodv/the-inner-workings-of-virtual-dom-666ee7ad47cf&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;VirtualDOM&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;(Preactの)Virtual DOMがどのような処理を経てレンダリングされているのかを追った記事。&lt;br&gt;
Virtual DOMの最適化処理についてなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;cross-browser-html5-form-validation-is-finally-here!-now-what?--telerik-developer-network&quot;&gt;Cross-Browser HTML5 Form Validation is Finally Here! Now What? -Telerik Developer Network&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.telerik.com/topics/web-development/cross-browser-html5-form-validation-finally-now/&quot; title=&quot;Cross-Browser HTML5 Form Validation is Finally Here! Now What? -Telerik Developer Network&quot;&gt;developer.telerik.com/topics/web-development/cross-browser-html5-form-validation-finally-now/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;HTML5&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;HTML5 Form Validation APIについて。&lt;br&gt;
WebKitもサポートしたので、すべてのブラウザで利用できるようになった&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;スライド、動画関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;professor-frisby-introduces-composable-functional-javascript---course-by-@drboolean-@eggheadio&quot;&gt;Professor Frisby Introduces Composable Functional JavaScript - Course by @drboolean @eggheadio&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://egghead.io/courses/professor-frisby-introduces-function-composition&quot; title=&quot;Professor Frisby Introduces Composable Functional JavaScript - Course by @drboolean @eggheadio&quot;&gt;egghead.io/courses/professor-frisby-introduces-function-composition&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;関数型プログラミング&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JavaScriptでのFunctionalプログラミングについてのスクリーンキャスト。&lt;br&gt;
Either的な実装やカリー化などについて解説してる&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;vue.js-fundamentals---youtube&quot;&gt;Vue.js Fundamentals - YouTube&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLwAKR305CRO_1yAao-8aZiQnBqJeyng4O&quot; title=&quot;Vue.js Fundamentals - YouTube&quot;&gt;www.youtube.com/playlist?list=PLwAKR305CRO_1yAao-8aZiQnBqJeyng4O&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;video&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Vue.js 2.0のチュートリアル動画&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;ecmascript:-latest-and-upcoming-features-//-speaker-deck&quot;&gt;ECMAScript: latest and upcoming features // Speaker Deck&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/rauschma/ecmascript-latest-and-upcoming-features&quot; title=&quot;ECMAScript: latest and upcoming features // Speaker Deck&quot;&gt;speakerdeck.com/rauschma/ecmascript-latest-and-upcoming-features&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;slide&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ES2016/ES2017と今Stage 3であるProposalについての紹介スライド&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;npm-desktop-manager&quot;&gt;Npm Desktop Manager&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://720kb.github.io/ndm/&quot; title=&quot;Npm Desktop Manager&quot;&gt;720kb.github.io/ndm/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;GUI&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;npmのパッケージを管理するGUIアプリケーション&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;date-fns/date-fns:-⏳-modern-javascript-date-utility-library-⌛️&quot;&gt;date-fns/date-fns: ⏳ Modern JavaScript date utility library ⌛️&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/date-fns/date-fns&quot; title=&quot;date-fns/date-fns: ⏳ Modern JavaScript date utility library ⌛️&quot;&gt;github.com/date-fns/date-fns&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Date周りの操作を提供するライブラリ。&lt;br&gt;
lodashのように利用する関数だけを取り出して使えるようにするのが目的となってる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/date-fns/date-fns/issues/275#issuecomment-264934189&quot; title=&quot;Add a brief comparison with Moment.js? · Issue #275 · date-fns/date-fns&quot;&gt;Add a brief comparison with Moment.js? · Issue #275 · date-fns/date-fns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;simple-statistics/simple-statistics:-simple-statistics-for-node-&amp;amp;-browser-javascript&quot;&gt;simple-statistics/simple-statistics: simple statistics for node &amp;amp; browser javascript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/simple-statistics/simple-statistics&quot; title=&quot;simple-statistics/simple-statistics: simple statistics for node &amp;amp; browser javascript&quot;&gt;github.com/simple-statistics/simple-statistics&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;統計&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;統計的な関数のコレクションライブラリ。&lt;br&gt;
Pythonのsimplestatisticsのport。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sheriferson/simplestatistics&quot; title=&quot;sheriferson/simplestatistics: Simple statistical functions implemented in readable Python.&quot;&gt;sheriferson/simplestatistics: Simple statistical functions implemented in readable Python.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Tue, 20 Dec 2016 10:38:00 +0900</pubDate>
        <link>https://jser.info/2016/12/20/rxjs-v5-angular-date-fns/</link>
        <guid isPermaLink="true">https://jser.info/2016/12/20/rxjs-v5-angular-date-fns/</guid>
        
        <category>Rx</category>
        
        <category>Angular</category>
        
        <category>Date</category>
        
        <category>library</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2017年1月15日(日)に JSer.info 6周年 &amp;&amp; 300回目記念イベント を開催します</title>
        <description>&lt;p&gt;2017年1月15日(日)にJSer.infoの6周年記念イベントをやります。&lt;br&gt;
(&lt;a href=&quot;https://jser.info/2016/10/10/300posts/&quot; title=&quot;300回目&quot;&gt;300回目&lt;/a&gt;記念はやってなかったのでついでです)&lt;/p&gt;

&lt;p&gt;次のイベントページから参加を申し込むことができます。&lt;br&gt;
申し込み開始は、2016/12/15(木) 21:00からです(抽選)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.connpass.com/event/46997/&quot; title=&quot;JSer.info 6周年と300回記念イベント - connpass&quot;&gt;JSer.info 6周年と300回記念イベント - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;発表枠&quot;&gt;発表枠&lt;/h3&gt;

&lt;p&gt;5-20分程度の発表をしてくれる人を募集しています。&lt;br&gt;
テーマはJavaScriptであれば問題ありません。&lt;/p&gt;

&lt;p&gt;発表枠で申し込んだ方は、発表時間やテーマなどを次のIssueなどで伝えてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jser/jser.info/issues/89&quot;&gt;JSer.info 6周年 &amp;amp;&amp;amp; 300回目記念イベント @ 1月15日(日) · Issue #89 · jser/jser.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Q&amp;amp;A&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. 30分以上の発表がしたい&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jser/jser.info/issues/89&quot;&gt;応相談&lt;/a&gt;。他の発表枠次第ですが可能です。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. どのくらいのレベルの参加者を想定した内容にすればいいの?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;基本的に全力でやってもらえればいいです。&lt;br&gt;
自分が勝手に補足を入れるので遠慮は不要です。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. どんなテーマならいいの?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JavaScriptであればいい気がします。&lt;br&gt;
参考までに前回のイベントでの発表内容は次のページにまとまっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.info/2016/01/16/jser-5years/&quot;&gt;JSer.info 5周年記念イベントを開催しました - JSer.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.info/2014/11/02/jser200/&quot;&gt;JSer.info 200回記念イベントを開催しました - JSer.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSer.infoに載っていそうなテーマ(JavaScriptやウェブ)からかけ離れてなければ良いです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. 初心者向けの内容でもいいの?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;問題ありません。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. 商業的な宣伝をメインにしたトーク&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ダメ&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. LTしたい&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ご自由にどうぞ。&lt;br&gt;
JavaScript Discussion後に懇談会を行う予定です。&lt;br&gt;
そのタイミングで自由にできます。&lt;/p&gt;

&lt;h3 id=&quot;書記枠&quot;&gt;書記枠&lt;/h3&gt;

&lt;p&gt;「書記枠」という変な枠もあります。&lt;/p&gt;

&lt;p&gt;自分がいつもやっているような&lt;a href=&quot;http://efcl.info/tags/?q=%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88&quot;&gt;アウトラインメモ&lt;/a&gt;を&lt;a href=&quot;http://etherpad.org/&quot; title=&quot;Etherpad&quot;&gt;Etherpad&lt;/a&gt;などを使って書くのを手伝ってくれる人の枠です。&lt;br&gt;
(司会業やってないときは自分もやります)&lt;/p&gt;

&lt;p&gt;当日リアルタイムで見れるようにして、文書ベースのデータがあると議論/質疑がしやすくなるかを試したいので、「書記枠」を用意しました。&lt;/p&gt;

&lt;p&gt;「書記枠」で申し込んでも、ずっと書いてないといけないわけでもないので、基本的にイベントの参加を優先していいです。&lt;/p&gt;

&lt;h3 id=&quot;javascript-discussion&quot;&gt;JavaScript Discussion&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://jser.info/2016/01/16/jser-5years/&quot; title=&quot;JSer.info 5周年記念イベント&quot;&gt;JSer.info 5周年記念イベント&lt;/a&gt;に来たことがある人はわかると思いますが、質問を集めたDiscussionボードを見ながら議論するコーナーです。&lt;/p&gt;

&lt;p&gt;次の場所に質問、聞きたいこと、話したいこと、主張を書き込むことができます。&lt;br&gt;
当日も時間を取りますが、事前に書いてもらっても問題ありません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://app.sli.do/event/bkry5ojl/ask&quot; title=&quot;JSer.info 6周年 - JavaScript Discussion&quot;&gt;JSer.info 6周年 - JavaScript Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;去年のDiscussionボードの様子:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://app.sli.do/event/0egbwyxz/ask&quot;&gt;&lt;img src=&quot;https://monosnap.com/file/z2VC0MmCQKox5DjQXlvOpNaYQjVhum.png&quot; alt=&quot;JavaScript Discussion(JavaScriptの良い所/悪い所/気になる事)&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;他にも、この人と話しあいたいとかあったらお知らせください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.connpass.com/event/46997/&quot; title=&quot;JSer.info 6周年と300回記念イベント - connpass&quot;&gt;JSer.info 6周年と300回記念イベント - connpass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jser/jser.info/issues/89&quot; title=&quot;JSer.info 6周年 &amp;amp;amp;&amp;amp;amp; 300回目記念イベント @ 1月15日(日) · Issue #89 · jser/jser.info&quot;&gt;JSer.info 6周年 &amp;amp;&amp;amp; 300回目記念イベント @ 1月15日(日) · Issue #89 · jser/jser.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 13 Dec 2016 09:26:00 +0900</pubDate>
        <link>https://jser.info/2016/12/13/announcement-jser-info-6years-event/</link>
        <guid isPermaLink="true">https://jser.info/2016/12/13/announcement-jser-info-6years-event/</guid>
        
        <category>イベント</category>
        
        <category>JSer</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>雑記</category>
        
      </item>
    
  </channel>
</rss>
